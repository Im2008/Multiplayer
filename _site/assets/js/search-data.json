{
  
    
        "post0": {
            "title": "Socket.io Multiplayer Game",
            "content": "Start Game Invert Restart",
            "url": "http://localhost:4100/Multiplayer/2024/01/08/CSSE-oop-mutliplayer-game.html",
            "relUrl": "/2024/01/08/CSSE-oop-mutliplayer-game.html",
            "date": " • Jan 8, 2024"
        }
        
    
  
    
        ,"post1": {
            "title": "Dynamic Game Levels",
            "content": "Start Game Invert Restart",
            "url": "http://localhost:4100/Multiplayer/2023/11/27/CSSE-oop-game-levels.html",
            "relUrl": "/2023/11/27/CSSE-oop-game-levels.html",
            "date": " • Nov 27, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Creators of Alien World .",
          "url": "http://localhost:4100/Multiplayer/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
      ,"page4": {
          "title": "Course Outlines",
          "content": "| CSSE | Game | . . . Investing in your Technical Future . Explore the Computer Science Pathway at Del Norte High School. All Del Norte CompSci classes are designed to provide a real-world development experience. Grading is focused on time invested, analytics, participation with peers, and engagement in learning. . Project-based learning with teacher support | Tech Talks by teacher complimented with Student Teaching | Course learning includes Coding Languages, DevOps, GitHub, Research and Ceativity | Student teams practice Agile Development Methodologies: planning, communication, collaboration | Class lab time provided and approximately 2-3 hours of homework per week | .",
          "url": "http://localhost:4100/Multiplayer/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "Time Box",
          "content": "",
          "url": "http://localhost:4100/Multiplayer/time/",
          "relUrl": "/time/",
          "date": ""
      }
      
  

  
  

  
  

  
      ,"page12": {
          "title": "1.3.8 / 2022-02-02",
          "content": "1.3.8 / 2022-02-02 . deps: mime-types@~2.1.34 deps: mime-db@~1.51.0 | . | deps: negotiator@0.6.3 | . 1.3.7 / 2019-04-29 . deps: negotiator@0.6.2 Fix sorting charset, encoding, and language with extra parameters | . | . 1.3.6 / 2019-04-28 . deps: mime-types@~2.1.24 deps: mime-db@~1.40.0 | . | . 1.3.5 / 2018-02-28 . deps: mime-types@~2.1.18 deps: mime-db@~1.33.0 | . | . 1.3.4 / 2017-08-22 . deps: mime-types@~2.1.16 deps: mime-db@~1.29.0 | . | . 1.3.3 / 2016-05-02 . deps: mime-types@~2.1.11 deps: mime-db@~1.23.0 | . | deps: negotiator@0.6.1 perf: improve Accept parsing speed | perf: improve Accept-Charset parsing speed | perf: improve Accept-Encoding parsing speed | perf: improve Accept-Language parsing speed | . | . 1.3.2 / 2016-03-08 . deps: mime-types@~2.1.10 Fix extension of application/dash+xml | Update primary extension for audio/mp4 | deps: mime-db@~1.22.0 | . | . 1.3.1 / 2016-01-19 . deps: mime-types@~2.1.9 deps: mime-db@~1.21.0 | . | . 1.3.0 / 2015-09-29 . deps: mime-types@~2.1.7 deps: mime-db@~1.19.0 | . | deps: negotiator@0.6.0 Fix including type extensions in parameters in Accept parsing | Fix parsing Accept parameters with quoted equals | Fix parsing Accept parameters with quoted semicolons | Lazy-load modules from main entry point | perf: delay type concatenation until needed | perf: enable strict mode | perf: hoist regular expressions | perf: remove closures getting spec properties | perf: remove a closure from media type parsing | perf: remove property delete from media type parsing | . | . 1.2.13 / 2015-09-06 . deps: mime-types@~2.1.6 deps: mime-db@~1.18.0 | . | . 1.2.12 / 2015-07-30 . deps: mime-types@~2.1.4 deps: mime-db@~1.16.0 | . | . 1.2.11 / 2015-07-16 . deps: mime-types@~2.1.3 deps: mime-db@~1.15.0 | . | . 1.2.10 / 2015-07-01 . deps: mime-types@~2.1.2 deps: mime-db@~1.14.0 | . | . 1.2.9 / 2015-06-08 . deps: mime-types@~2.1.1 perf: fix deopt during mapping | . | . 1.2.8 / 2015-06-07 . deps: mime-types@~2.1.0 deps: mime-db@~1.13.0 | . | perf: avoid argument reassignment &amp; argument slice | perf: avoid negotiator recursive construction | perf: enable strict mode | perf: remove unnecessary bitwise operator | . 1.2.7 / 2015-05-10 . deps: negotiator@0.5.3 Fix media type parameter matching to be case-insensitive | . | . 1.2.6 / 2015-05-07 . deps: mime-types@~2.0.11 deps: mime-db@~1.9.1 | . | deps: negotiator@0.5.2 Fix comparing media types with quoted values | Fix splitting media types with quoted commas | . | . 1.2.5 / 2015-03-13 . deps: mime-types@~2.0.10 deps: mime-db@~1.8.0 | . | . 1.2.4 / 2015-02-14 . Support Node.js 0.6 | deps: mime-types@~2.0.9 deps: mime-db@~1.7.0 | . | deps: negotiator@0.5.1 Fix preference sorting to be stable for long acceptable lists | . | . 1.2.3 / 2015-01-31 . deps: mime-types@~2.0.8 deps: mime-db@~1.6.0 | . | . 1.2.2 / 2014-12-30 . deps: mime-types@~2.0.7 deps: mime-db@~1.5.0 | . | . 1.2.1 / 2014-12-30 . deps: mime-types@~2.0.5 deps: mime-db@~1.3.1 | . | . 1.2.0 / 2014-12-19 . deps: negotiator@0.5.0 Fix list return order when large accepted list | Fix missing identity encoding when q=0 exists | Remove dynamic building of Negotiator class | . | . 1.1.4 / 2014-12-10 . deps: mime-types@~2.0.4 deps: mime-db@~1.3.0 | . | . 1.1.3 / 2014-11-09 . deps: mime-types@~2.0.3 deps: mime-db@~1.2.0 | . | . 1.1.2 / 2014-10-14 . deps: negotiator@0.4.9 Fix error when media type has invalid parameter | . | . 1.1.1 / 2014-09-28 . deps: mime-types@~2.0.2 deps: mime-db@~1.1.0 | . | deps: negotiator@0.4.8 Fix all negotiations to be case-insensitive | Stable sort preferences of same quality according to client order | . | . 1.1.0 / 2014-09-02 . update mime-types | . 1.0.7 / 2014-07-04 . Fix wrong type returned from type when match after unknown extension | . 1.0.6 / 2014-06-24 . deps: negotiator@0.4.7 | . 1.0.5 / 2014-06-20 . fix crash when unknown extension given | . 1.0.4 / 2014-06-19 . use mime-types | . 1.0.3 / 2014-06-11 . deps: negotiator@0.4.6 Order by specificity when quality is the same | . | . 1.0.2 / 2014-05-29 . Fix interpretation when header not in request | deps: pin negotiator@0.4.5 | . 1.0.1 / 2014-01-18 . Identity encoding isn’t always acceptable | deps: negotiator@~0.4.0 | . 1.0.0 / 2013-12-27 . Genesis | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/accepts/HISTORY.html",
          "relUrl": "/node_backend/node_modules/accepts/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page13": {
          "title": "2.0.0 (2019-05-27)",
          "content": "2.0.0 (2019-05-27) . Code Refactoring . buffer: replace deprecated Buffer constructor usage (#11) (ccfba54) | . BREAKING CHANGES . buffer: drop support for Node.js ≤ 4.4.x and 5.0.0 - 5.9.x | . See: https://nodejs.org/en/docs/guides/buffer-constructor-deprecation/ .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/base64id/CHANGELOG.html",
          "relUrl": "/node_backend/node_modules/base64id/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page14": {
          "title": "0.4.2 / 2022-02-02",
          "content": "0.4.2 / 2022-02-02 . pref: read value only when assigning in parse | pref: remove unnecessary regexp in parse | . 0.4.1 / 2020-04-21 . Fix maxAge option to reject invalid values | . 0.4.0 / 2019-05-15 . Add SameSite=None support | . 0.3.1 / 2016-05-26 . Fix sameSite: true to work with draft-7 clients true now sends SameSite=Strict instead of SameSite | . | . 0.3.0 / 2016-05-26 . Add sameSite option Replaces firstPartyOnly option, never implemented by browsers | . | Improve error message when encode is not a function | Improve error message when expires is not a Date | . 0.2.4 / 2016-05-20 . perf: enable strict mode | perf: use for loop in parse | perf: use string concatination for serialization | . 0.2.3 / 2015-10-25 . Fix cookie Max-Age to never be a floating point number | . 0.2.2 / 2015-09-17 . Fix regression when setting empty cookie value Ease the new restriction, which is just basic header-level validation | . | Fix typo in invalid value errors | . 0.2.1 / 2015-09-17 . Throw on invalid values provided to serialize Ensures the resulting string is a valid HTTP header value | . | . 0.2.0 / 2015-08-13 . Add firstPartyOnly option | Throw better error for invalid argument to parse | perf: hoist regular expression | . 0.1.5 / 2015-09-17 . Fix regression when setting empty cookie value Ease the new restriction, which is just basic header-level validation | . | Fix typo in invalid value errors | . 0.1.4 / 2015-09-17 . Throw better error for invalid argument to parse | Throw on invalid values provided to serialize Ensures the resulting string is a valid HTTP header value | . | . 0.1.3 / 2015-05-19 . Reduce the scope of try-catch deopt | Remove argument reassignments | . 0.1.2 / 2014-04-16 . Remove unnecessary files from npm package | . 0.1.1 / 2014-02-23 . Fix bad parse when cookie value contained a comma | Fix support for maxAge of 0 | . 0.1.0 / 2013-05-01 . Add decode option | Add encode option | . 0.0.6 / 2013-04-08 . Ignore cookie parts missing = | . 0.0.5 / 2012-10-29 . Return raw cookie value if value unescape errors | . 0.0.4 / 2012-06-21 . Use encode/decodeURIComponent for cookie encoding/decoding Improve server/client interoperability | . | . 0.0.3 / 2012-06-06 . Only escape special characters per the cookie RFC | . 0.0.2 / 2012-06-01 . Fix maxAge option to not throw error | . 0.0.1 / 2012-05-28 . Add more tests | . 0.0.0 / 2012-05-28 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/cookie/HISTORY.html",
          "relUrl": "/node_backend/node_modules/cookie/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page15": {
          "title": "2.8.5 / 2018-11-04",
          "content": "2.8.5 / 2018-11-04 . Fix setting maxAge option to 0 | . 2.8.4 / 2017-07-12 . Work-around Safari bug in default pre-flight response | . 2.8.3 / 2017-03-29 . Fix error when options delegate missing methods option | . 2.8.2 / 2017-03-28 . Fix error when frozen options are passed | Send “Vary: Origin” when using regular expressions | Send “Vary: Access-Control-Request-Headers” when dynamic allowedHeaders | . 2.8.1 / 2016-09-08 . This release only changed documentation. . 2.8.0 / 2016-08-23 . Add optionsSuccessStatus option | . 2.7.2 / 2016-08-23 . Fix error when Node.js running in strict mode | . 2.7.1 / 2015-05-28 . Move module into expressjs organization | . 2.7.0 / 2015-05-28 . Allow array of matching condition as origin option | Allow regular expression as origin option | . 2.6.1 / 2015-05-28 . Update license in package.json | . 2.6.0 / 2015-04-27 . Add preflightContinue option | Fix “Vary: Origin” header added for “*” | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/cors/HISTORY.html",
          "relUrl": "/node_backend/node_modules/cors/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page16": {
          "title": "1.52.0 / 2022-02-21",
          "content": "1.52.0 / 2022-02-21 . Add extensions from IANA for more image/* types | Add extension .asc to application/pgp-keys | Add extensions to various XML types | Add new upstream MIME types | . 1.51.0 / 2021-11-08 . Add new upstream MIME types | Mark image/vnd.microsoft.icon as compressible | Mark image/vnd.ms-dds as compressible | . 1.50.0 / 2021-09-15 . Add deprecated iWorks mime types and extensions | Add new upstream MIME types | . 1.49.0 / 2021-07-26 . Add extension .trig to application/trig | Add new upstream MIME types | . 1.48.0 / 2021-05-30 . Add extension .mvt to application/vnd.mapbox-vector-tile | Add new upstream MIME types | Mark text/yaml as compressible | . 1.47.0 / 2021-04-01 . Add new upstream MIME types | Remove ambigious extensions from IANA for application/*+xml types | Update primary extension to .es for application/ecmascript | . 1.46.0 / 2021-02-13 . Add extension .amr to audio/amr | Add extension .m4s to video/iso.segment | Add extension .opus to audio/ogg | Add new upstream MIME types | . 1.45.0 / 2020-09-22 . Add application/ubjson with extension .ubj | Add image/avif with extension .avif | Add image/ktx2 with extension .ktx2 | Add extension .dbf to application/vnd.dbf | Add extension .rar to application/vnd.rar | Add extension .td to application/urc-targetdesc+xml | Add new upstream MIME types | Fix extension of application/vnd.apple.keynote to be .key | . 1.44.0 / 2020-04-22 . Add charsets from IANA | Add extension .cjs to application/node | Add new upstream MIME types | . 1.43.0 / 2020-01-05 . Add application/x-keepass2 with extension .kdbx | Add extension .mxmf to audio/mobile-xmf | Add extensions from IANA for application/*+xml types | Add new upstream MIME types | . 1.42.0 / 2019-09-25 . Add image/vnd.ms-dds with extension .dds | Add new upstream MIME types | Remove compressible from multipart/mixed | . 1.41.0 / 2019-08-30 . Add new upstream MIME types | Add application/toml with extension .toml | Mark font/ttf as compressible | . 1.40.0 / 2019-04-20 . Add extensions from IANA for model/* types | Add text/mdx with extension .mdx | . 1.39.0 / 2019-04-04 . Add extensions .siv and .sieve to application/sieve | Add new upstream MIME types | . 1.38.0 / 2019-02-04 . Add extension .nq to application/n-quads | Add extension .nt to application/n-triples | Add new upstream MIME types | Mark text/less as compressible | . 1.37.0 / 2018-10-19 . Add extensions to HEIC image types | Add new upstream MIME types | . 1.36.0 / 2018-08-20 . Add Apple file extensions from IANA | Add extensions from IANA for image/* types | Add new upstream MIME types | . 1.35.0 / 2018-07-15 . Add extension .owl to application/rdf+xml | Add new upstream MIME types Removes extension .woff from application/font-woff | . | . 1.34.0 / 2018-06-03 . Add extension .csl to application/vnd.citationstyles.style+xml | Add extension .es to application/ecmascript | Add new upstream MIME types | Add UTF-8 as default charset for text/turtle | Mark all XML-derived types as compressible | . 1.33.0 / 2018-02-15 . Add extensions from IANA for message/* types | Add new upstream MIME types | Fix some incorrect OOXML types | Remove application/font-woff2 | . 1.32.0 / 2017-11-29 . Add new upstream MIME types | Update text/hjson to registered application/hjson | Add text/shex with extension .shex | . 1.31.0 / 2017-10-25 . Add application/raml+yaml with extension .raml | Add application/wasm with extension .wasm | Add new font type from IANA | Add new upstream font extensions | Add new upstream MIME types | Add extensions for JPEG-2000 images | . 1.30.0 / 2017-08-27 . Add application/vnd.ms-outlook | Add application/x-arj | Add extension .mjs to application/javascript | Add glTF types and extensions | Add new upstream MIME types | Add text/x-org | Add VirtualBox MIME types | Fix source records for video/* types that are IANA | Update font/opentype to registered font/otf | . 1.29.0 / 2017-07-10 . Add application/fido.trusted-apps+json | Add extension .wadl to application/vnd.sun.wadl+xml | Add new upstream MIME types | Add UTF-8 as default charset for text/css | . 1.28.0 / 2017-05-14 . Add new upstream MIME types | Add extension .gz to application/gzip | Update extensions .md and .markdown to be text/markdown | . 1.27.0 / 2017-03-16 . Add new upstream MIME types | Add image/apng with extension .apng | . 1.26.0 / 2017-01-14 . Add new upstream MIME types | Add extension .geojson to application/geo+json | . 1.25.0 / 2016-11-11 . Add new upstream MIME types | . 1.24.0 / 2016-09-18 . Add audio/mp3 | Add new upstream MIME types | . 1.23.0 / 2016-05-01 . Add new upstream MIME types | Add extension .3gpp to audio/3gpp | . 1.22.0 / 2016-02-15 . Add text/slim | Add extension .rng to application/xml | Add new upstream MIME types | Fix extension of application/dash+xml to be .mpd | Update primary extension to .m4a for audio/mp4 | . 1.21.0 / 2016-01-06 . Add Google document types | Add new upstream MIME types | . 1.20.0 / 2015-11-10 . Add text/x-suse-ymp | Add new upstream MIME types | . 1.19.0 / 2015-09-17 . Add application/vnd.apple.pkpass | Add new upstream MIME types | . 1.18.0 / 2015-09-03 . Add new upstream MIME types | . 1.17.0 / 2015-08-13 . Add application/x-msdos-program | Add audio/g711-0 | Add image/vnd.mozilla.apng | Add extension .exe to application/x-msdos-program | . 1.16.0 / 2015-07-29 . Add application/vnd.uri-map | . 1.15.0 / 2015-07-13 . Add application/x-httpd-php | . 1.14.0 / 2015-06-25 . Add application/scim+json | Add application/vnd.3gpp.ussd+xml | Add application/vnd.biopax.rdf+xml | Add text/x-processing | . 1.13.0 / 2015-06-07 . Add nginx as a source | Add application/x-cocoa | Add application/x-java-archive-diff | Add application/x-makeself | Add application/x-perl | Add application/x-pilot | Add application/x-redhat-package-manager | Add application/x-sea | Add audio/x-m4a | Add audio/x-realaudio | Add image/x-jng | Add text/mathml | . 1.12.0 / 2015-06-05 . Add application/bdoc | Add application/vnd.hyperdrive+json | Add application/x-bdoc | Add extension .rtf to text/rtf | . 1.11.0 / 2015-05-31 . Add audio/wav | Add audio/wave | Add extension .litcoffee to text/coffeescript | Add extension .sfd-hdstx to application/vnd.hydrostatix.sof-data | Add extension .n-gage to application/vnd.nokia.n-gage.symbian.install | . 1.10.0 / 2015-05-19 . Add application/vnd.balsamiq.bmpr | Add application/vnd.microsoft.portable-executable | Add application/x-ns-proxy-autoconfig | . 1.9.1 / 2015-04-19 . Remove .json extension from application/manifest+json This is causing bugs downstream | . | . 1.9.0 / 2015-04-19 . Add application/manifest+json | Add application/vnd.micro+json | Add image/vnd.zbrush.pcx | Add image/x-ms-bmp | . 1.8.0 / 2015-03-13 . Add application/vnd.citationstyles.style+xml | Add application/vnd.fastcopy-disk-image | Add application/vnd.gov.sk.xmldatacontainer+xml | Add extension .jsonld to application/ld+json | . 1.7.0 / 2015-02-08 . Add application/vnd.gerber | Add application/vnd.msa-disk-image | . 1.6.1 / 2015-02-05 . Community extensions ownership transferred from node-mime | . 1.6.0 / 2015-01-29 . Add application/jose | Add application/jose+json | Add application/json-seq | Add application/jwk+json | Add application/jwk-set+json | Add application/jwt | Add application/rdap+json | Add application/vnd.gov.sk.e-form+xml | Add application/vnd.ims.imsccv1p3 | . 1.5.0 / 2014-12-30 . Add application/vnd.oracle.resource+json | Fix various invalid MIME type entries application/mbox+xml | application/oscp-response | application/vwg-multiplexed | audio/g721 | . | . 1.4.0 / 2014-12-21 . Add application/vnd.ims.imsccv1p2 | Fix various invalid MIME type entries application/vnd-acucobol | application/vnd-curl | application/vnd-dart | application/vnd-dxr | application/vnd-fdf | application/vnd-mif | application/vnd-sema | application/vnd-wap-wmlc | application/vnd.adobe.flash-movie | application/vnd.dece-zip | application/vnd.dvb_service | application/vnd.micrografx-igx | application/vnd.sealed-doc | application/vnd.sealed-eml | application/vnd.sealed-mht | application/vnd.sealed-ppt | application/vnd.sealed-tiff | application/vnd.sealed-xls | application/vnd.sealedmedia.softseal-html | application/vnd.sealedmedia.softseal-pdf | application/vnd.wap-slc | application/vnd.wap-wbxml | audio/vnd.sealedmedia.softseal-mpeg | image/vnd-djvu | image/vnd-svf | image/vnd-wap-wbmp | image/vnd.sealed-png | image/vnd.sealedmedia.softseal-gif | image/vnd.sealedmedia.softseal-jpg | model/vnd-dwf | model/vnd.parasolid.transmit-binary | model/vnd.parasolid.transmit-text | text/vnd-a | text/vnd-curl | text/vnd.wap-wml | . | Remove example template MIME types application/example | audio/example | image/example | message/example | model/example | multipart/example | text/example | video/example | . | . 1.3.1 / 2014-12-16 . Fix missing extensions application/json5 | text/hjson | . | . 1.3.0 / 2014-12-07 . Add application/a2l | Add application/aml | Add application/atfx | Add application/atxml | Add application/cdfx+xml | Add application/dii | Add application/json5 | Add application/lxf | Add application/mf4 | Add application/vnd.apache.thrift.compact | Add application/vnd.apache.thrift.json | Add application/vnd.coffeescript | Add application/vnd.enphase.envoy | Add application/vnd.ims.imsccv1p1 | Add text/csv-schema | Add text/hjson | Add text/markdown | Add text/yaml | . 1.2.0 / 2014-11-09 . Add application/cea | Add application/dit | Add application/vnd.gov.sk.e-form+zip | Add application/vnd.tmd.mediaflex.api+xml | Type application/epub+zip is now IANA-registered | . 1.1.2 / 2014-10-23 . Rebuild database for application/x-www-form-urlencoded change | . 1.1.1 / 2014-10-20 . Mark application/x-www-form-urlencoded as compressible. | . 1.1.0 / 2014-09-28 . Add application/font-woff2 | . 1.0.3 / 2014-09-25 . Fix engine requirement in package | . 1.0.2 / 2014-09-25 . Add application/coap-group+json | Add application/dcd | Add application/vnd.apache.thrift.binary | Add image/vnd.tencent.tap | Mark all JSON-derived types as compressible | Update text/vtt data | . 1.0.1 / 2014-08-30 . Fix extension ordering | . 1.0.0 / 2014-08-30 . Add application/atf | Add application/merge-patch+json | Add multipart/x-mixed-replace | Add source: &#39;apache&#39; metadata | Add source: &#39;iana&#39; metadata | Remove badly-assumed charset data | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/mime-db/HISTORY.html",
          "relUrl": "/node_backend/node_modules/mime-db/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page17": {
          "title": "2.1.35 / 2022-03-12",
          "content": "2.1.35 / 2022-03-12 . deps: mime-db@1.52.0 Add extensions from IANA for more image/* types | Add extension .asc to application/pgp-keys | Add extensions to various XML types | Add new upstream MIME types | . | . 2.1.34 / 2021-11-08 . deps: mime-db@1.51.0 Add new upstream MIME types | . | . 2.1.33 / 2021-10-01 . deps: mime-db@1.50.0 Add deprecated iWorks mime types and extensions | Add new upstream MIME types | . | . 2.1.32 / 2021-07-27 . deps: mime-db@1.49.0 Add extension .trig to application/trig | Add new upstream MIME types | . | . 2.1.31 / 2021-06-01 . deps: mime-db@1.48.0 Add extension .mvt to application/vnd.mapbox-vector-tile | Add new upstream MIME types | . | . 2.1.30 / 2021-04-02 . deps: mime-db@1.47.0 Add extension .amr to audio/amr | Remove ambigious extensions from IANA for application/*+xml types | Update primary extension to .es for application/ecmascript | . | . 2.1.29 / 2021-02-17 . deps: mime-db@1.46.0 Add extension .amr to audio/amr | Add extension .m4s to video/iso.segment | Add extension .opus to audio/ogg | Add new upstream MIME types | . | . 2.1.28 / 2021-01-01 . deps: mime-db@1.45.0 Add application/ubjson with extension .ubj | Add image/avif with extension .avif | Add image/ktx2 with extension .ktx2 | Add extension .dbf to application/vnd.dbf | Add extension .rar to application/vnd.rar | Add extension .td to application/urc-targetdesc+xml | Add new upstream MIME types | Fix extension of application/vnd.apple.keynote to be .key | . | . 2.1.27 / 2020-04-23 . deps: mime-db@1.44.0 Add charsets from IANA | Add extension .cjs to application/node | Add new upstream MIME types | . | . 2.1.26 / 2020-01-05 . deps: mime-db@1.43.0 Add application/x-keepass2 with extension .kdbx | Add extension .mxmf to audio/mobile-xmf | Add extensions from IANA for application/*+xml types | Add new upstream MIME types | . | . 2.1.25 / 2019-11-12 . deps: mime-db@1.42.0 Add new upstream MIME types | Add application/toml with extension .toml | Add image/vnd.ms-dds with extension .dds | . | . 2.1.24 / 2019-04-20 . deps: mime-db@1.40.0 Add extensions from IANA for model/* types | Add text/mdx with extension .mdx | . | . 2.1.23 / 2019-04-17 . deps: mime-db@~1.39.0 Add extensions .siv and .sieve to application/sieve | Add new upstream MIME types | . | . 2.1.22 / 2019-02-14 . deps: mime-db@~1.38.0 Add extension .nq to application/n-quads | Add extension .nt to application/n-triples | Add new upstream MIME types | . | . 2.1.21 / 2018-10-19 . deps: mime-db@~1.37.0 Add extensions to HEIC image types | Add new upstream MIME types | . | . 2.1.20 / 2018-08-26 . deps: mime-db@~1.36.0 Add Apple file extensions from IANA | Add extensions from IANA for image/* types | Add new upstream MIME types | . | . 2.1.19 / 2018-07-17 . deps: mime-db@~1.35.0 Add extension .csl to application/vnd.citationstyles.style+xml | Add extension .es to application/ecmascript | Add extension .owl to application/rdf+xml | Add new upstream MIME types | Add UTF-8 as default charset for text/turtle | . | . 2.1.18 / 2018-02-16 . deps: mime-db@~1.33.0 Add application/raml+yaml with extension .raml | Add application/wasm with extension .wasm | Add text/shex with extension .shex | Add extensions for JPEG-2000 images | Add extensions from IANA for message/* types | Add new upstream MIME types | Update font MIME types | Update text/hjson to registered application/hjson | . | . 2.1.17 / 2017-09-01 . deps: mime-db@~1.30.0 Add application/vnd.ms-outlook | Add application/x-arj | Add extension .mjs to application/javascript | Add glTF types and extensions | Add new upstream MIME types | Add text/x-org | Add VirtualBox MIME types | Fix source records for video/* types that are IANA | Update font/opentype to registered font/otf | . | . 2.1.16 / 2017-07-24 . deps: mime-db@~1.29.0 Add application/fido.trusted-apps+json | Add extension .wadl to application/vnd.sun.wadl+xml | Add extension .gz to application/gzip | Add new upstream MIME types | Update extensions .md and .markdown to be text/markdown | . | . 2.1.15 / 2017-03-23 . deps: mime-db@~1.27.0 Add new mime types | Add image/apng | . | . 2.1.14 / 2017-01-14 . deps: mime-db@~1.26.0 Add new mime types | . | . 2.1.13 / 2016-11-18 . deps: mime-db@~1.25.0 Add new mime types | . | . 2.1.12 / 2016-09-18 . deps: mime-db@~1.24.0 Add new mime types | Add audio/mp3 | . | . 2.1.11 / 2016-05-01 . deps: mime-db@~1.23.0 Add new mime types | . | . 2.1.10 / 2016-02-15 . deps: mime-db@~1.22.0 Add new mime types | Fix extension of application/dash+xml | Update primary extension for audio/mp4 | . | . 2.1.9 / 2016-01-06 . deps: mime-db@~1.21.0 Add new mime types | . | . 2.1.8 / 2015-11-30 . deps: mime-db@~1.20.0 Add new mime types | . | . 2.1.7 / 2015-09-20 . deps: mime-db@~1.19.0 Add new mime types | . | . 2.1.6 / 2015-09-03 . deps: mime-db@~1.18.0 Add new mime types | . | . 2.1.5 / 2015-08-20 . deps: mime-db@~1.17.0 Add new mime types | . | . 2.1.4 / 2015-07-30 . deps: mime-db@~1.16.0 Add new mime types | . | . 2.1.3 / 2015-07-13 . deps: mime-db@~1.15.0 Add new mime types | . | . 2.1.2 / 2015-06-25 . deps: mime-db@~1.14.0 Add new mime types | . | . 2.1.1 / 2015-06-08 . perf: fix deopt during mapping | . 2.1.0 / 2015-06-07 . Fix incorrectly treating extension-less file name as extension i.e. &#39;path/to/json&#39; will no longer return application/json | . | Fix .charset(type) to accept parameters | Fix .charset(type) to match case-insensitive | Improve generation of extension to MIME mapping | Refactor internals for readability and no argument reassignment | Prefer application/* MIME types from the same source | Prefer any type over application/octet-stream | deps: mime-db@~1.13.0 Add nginx as a source | Add new mime types | . | . 2.0.14 / 2015-06-06 . deps: mime-db@~1.12.0 Add new mime types | . | . 2.0.13 / 2015-05-31 . deps: mime-db@~1.11.0 Add new mime types | . | . 2.0.12 / 2015-05-19 . deps: mime-db@~1.10.0 Add new mime types | . | . 2.0.11 / 2015-05-05 . deps: mime-db@~1.9.1 Add new mime types | . | . 2.0.10 / 2015-03-13 . deps: mime-db@~1.8.0 Add new mime types | . | . 2.0.9 / 2015-02-09 . deps: mime-db@~1.7.0 Add new mime types | Community extensions ownership transferred from node-mime | . | . 2.0.8 / 2015-01-29 . deps: mime-db@~1.6.0 Add new mime types | . | . 2.0.7 / 2014-12-30 . deps: mime-db@~1.5.0 Add new mime types | Fix various invalid MIME type entries | . | . 2.0.6 / 2014-12-30 . deps: mime-db@~1.4.0 Add new mime types | Fix various invalid MIME type entries | Remove example template MIME types | . | . 2.0.5 / 2014-12-29 . deps: mime-db@~1.3.1 Fix missing extensions | . | . 2.0.4 / 2014-12-10 . deps: mime-db@~1.3.0 Add new mime types | . | . 2.0.3 / 2014-11-09 . deps: mime-db@~1.2.0 Add new mime types | . | . 2.0.2 / 2014-09-28 . deps: mime-db@~1.1.0 Add new mime types | Update charsets | . | . 2.0.1 / 2014-09-07 . Support Node.js 0.6 | . 2.0.0 / 2014-09-02 . Use mime-db | Remove .define() | . 1.0.2 / 2014-08-04 . Set charset=utf-8 for text/javascript | . 1.0.1 / 2014-06-24 . Add text/jsx type | . 1.0.0 / 2014-05-12 . Return false for unknown types | Set charset=utf-8 for application/json | . 0.1.0 / 2014-05-02 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/mime-types/HISTORY.html",
          "relUrl": "/node_backend/node_modules/mime-types/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page18": {
          "title": "0.6.3 / 2022-01-22",
          "content": "0.6.3 / 2022-01-22 . Revert “Lazy-load modules from main entry point” | . 0.6.2 / 2019-04-29 . Fix sorting charset, encoding, and language with extra parameters | . 0.6.1 / 2016-05-02 . perf: improve Accept parsing speed | perf: improve Accept-Charset parsing speed | perf: improve Accept-Encoding parsing speed | perf: improve Accept-Language parsing speed | . 0.6.0 / 2015-09-29 . Fix including type extensions in parameters in Accept parsing | Fix parsing Accept parameters with quoted equals | Fix parsing Accept parameters with quoted semicolons | Lazy-load modules from main entry point | perf: delay type concatenation until needed | perf: enable strict mode | perf: hoist regular expressions | perf: remove closures getting spec properties | perf: remove a closure from media type parsing | perf: remove property delete from media type parsing | . 0.5.3 / 2015-05-10 . Fix media type parameter matching to be case-insensitive | . 0.5.2 / 2015-05-06 . Fix comparing media types with quoted values | Fix splitting media types with quoted commas | . 0.5.1 / 2015-02-14 . Fix preference sorting to be stable for long acceptable lists | . 0.5.0 / 2014-12-18 . Fix list return order when large accepted list | Fix missing identity encoding when q=0 exists | Remove dynamic building of Negotiator class | . 0.4.9 / 2014-10-14 . Fix error when media type has invalid parameter | . 0.4.8 / 2014-09-28 . Fix all negotiations to be case-insensitive | Stable sort preferences of same quality according to client order | Support Node.js 0.6 | . 0.4.7 / 2014-06-24 . Handle invalid provided languages | Handle invalid provided media types | . 0.4.6 / 2014-06-11 . Order by specificity when quality is the same | . 0.4.5 / 2014-05-29 . Fix regression in empty header handling | . 0.4.4 / 2014-05-29 . Fix behaviors when headers are not present | . 0.4.3 / 2014-04-16 . Handle slashes on media params correctly | . 0.4.2 / 2014-02-28 . Fix media type sorting | Handle media types params strictly | . 0.4.1 / 2014-01-16 . Use most specific matches | . 0.4.0 / 2014-01-09 . Remove preferred prefix from methods | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/negotiator/HISTORY.html",
          "relUrl": "/node_backend/node_modules/negotiator/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page19": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. See standard-version for commit guidelines. . 9.0.1 (2023-09-12) . build . Fix CI to work with Node.js 20.x | . 9.0.0 (2022-09-05) . ⚠ BREAKING CHANGES . Drop Node.js 10.x support. This library always aims at supporting one EOLed LTS release which by this time now is 12.x which has reached EOL 30 Apr 2022. . | Remove the minified UMD build from the package. . Minified code is hard to audit and since this is a widely used library it seems more appropriate nowadays to optimize for auditability than to ship a legacy module format that, at best, serves educational purposes nowadays. . For production browser use cases, users should be using a bundler. For educational purposes, today’s online sandboxes like replit.com offer convenient ways to load npm modules, so the use case for UMD through repos like UNPKG or jsDelivr has largely vanished. . | Drop IE 11 and Safari 10 support. Drop support for browsers that don’t correctly implement const/let and default arguments, and no longer transpile the browser build to ES2015. . This also removes the fallback on msCrypto instead of the crypto API. . Browser tests are run in the first supported version of each supported browser and in the latest (as of this commit) version available on Browserstack. . | . Features . optimize uuid.v1 by 1.3x uuid.v4 by 4.3x (430%) (#597) (3a033f6) | remove UMD build (#645) (e948a0f), closes #620 | use native crypto.randomUUID when available (#600) (c9e076c) | . Bug Fixes . add Jest/jsdom compatibility (#642) (16f9c46) | change default export to named function (#545) (c57bc5a) | handle error when parameter is not set in v3 and v5 (#622) (fcd7388) | run npm audit fix (#644) (04686f5) | upgrading from uuid3 broken link (#568) (1c849da) | . build . drop Node.js 8.x from babel transpile target (#603) (aa11485) | drop support for legacy browsers (IE11, Safari 10) (#604) (0f433e5) . | drop node 10.x to upgrade dev dependencies (#653) (28a5712), closes #643 | . 8.3.2 (2020-12-08) . Bug Fixes . lazy load getRandomValues (#537) (16c8f6d), closes #536 | . 8.3.1 (2020-10-04) . Bug Fixes . support expo&gt;=39.0.0 (#515) (c65a0f3), closes #375 | . 8.3.0 (2020-07-27) . Features . add parse/stringify/validate/version/NIL APIs (#479) (0e6c10b), closes #475 #478 #480 #481 #180 | . 8.2.0 (2020-06-23) . Features . improve performance of v1 string representation (#453) (0ee0b67) | remove deprecated v4 string parameter (#454) (88ce3ca), closes #437 | support jspm (#473) (e9f2587) | . Bug Fixes . prepare package exports for webpack 5 (#468) (8d6e6a5) | . 8.1.0 (2020-05-20) . Features . improve v4 performance by reusing random number array (#435) (bf4af0d) | optimize V8 performance of bytesToUuid (#434) (e156415) | . Bug Fixes . export package.json required by react-native and bundlers (#449) (be1c8fe), closes ai/nanoevents#44 #444 | . 8.0.0 (2020-04-29) . ⚠ BREAKING CHANGES . For native ECMAScript Module (ESM) usage in Node.js only named exports are exposed, there is no more default export. . -import uuid from &#39;uuid&#39;; -console.log(uuid.v4()); // -&gt; &#39;cd6c3b08-0adc-4f4b-a6ef-36087a1c9869&#39; +import { v4 as uuidv4 } from &#39;uuid&#39;; +uuidv4(); // ⇨ &#39;9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d&#39; . | Deep requiring specific algorithms of this library like require(&#39;uuid/v4&#39;), which has been deprecated in uuid@7, is no longer supported. . Instead use the named exports that this module exports. . For ECMAScript Modules (ESM): . -import uuidv4 from &#39;uuid/v4&#39;; +import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); . For CommonJS: . -const uuidv4 = require(&#39;uuid/v4&#39;); +const { v4: uuidv4 } = require(&#39;uuid&#39;); uuidv4(); . | . Features . native Node.js ES Modules (wrapper approach) (#423) (2d9f590), closes #245 #419 #342 | remove deep requires (#426) (daf72b8) | . Bug Fixes . add CommonJS syntax example to README quickstart section (#417) (e0ec840) | . 7.0.3 (2020-03-31) . Bug Fixes . make deep require deprecation warning work in browsers (#409) (4b71107), closes #408 | . 7.0.2 (2020-03-04) . Bug Fixes . make access to msCrypto consistent (#393) (8bf2a20) | simplify link in deprecation warning (#391) (bb2c8e4) | update links to match content in readme (#386) (44f2f86) | . 7.0.1 (2020-02-25) . Bug Fixes . clean up esm builds for node and browser (#383) (59e6a49) | provide browser versions independent from module system (#380) (4344a22), closes #378 | . 7.0.0 (2020-02-24) . ⚠ BREAKING CHANGES . The default export, which used to be the v4() method but which was already discouraged in v3.x of this library, has been removed. | Explicitly note that deep imports of the different uuid version functions are deprecated and no longer encouraged and that ECMAScript module named imports should be used instead. Emit a deprecation warning for people who deep-require the different algorithm variants. | Remove builtin support for insecure random number generators in the browser. Users who want that will have to supply their own random number generator function. | Remove support for generating v3 and v5 UUIDs in Node.js&lt;4.x | Convert code base to ECMAScript Modules (ESM) and release CommonJS build for node and ESM build for browser bundlers. | . Features . add UMD build to npm package (#357) (4e75adf), closes #345 | add various es module and CommonJS examples (b238510) | ensure that docs are up-to-date in CI (ee5e77d) | hybrid CommonJS &amp; ECMAScript modules build (a3f078f) | remove insecure fallback random number generator (3a5842b), closes #173 | remove support for pre Node.js v4 Buffer API (#356) (b59b5c5) | rename repository to github:uuidjs/uuid (#351) (c37a518), closes #338 | . Bug Fixes . add deep-require proxies for local testing and adjust tests (#365) (7fedc79) | add note about removal of default export (#372) (12749b7), closes #370 | deprecated deep requiring of the different algorithm versions (#361) (c0bdf15) | . 3.4.0 (2020-01-16) . Features . rename repository to github:uuidjs/uuid (#351) (e2d7314), closes #338 | . 3.3.3 (2019-08-19) . Bug Fixes . no longer run ci tests on node v4 | upgrade dependencies | . 3.3.2 (2018-06-28) . Bug Fixes . typo (305d877) | . 3.3.1 (2018-06-28) . Bug Fixes . fix #284 by setting function name in try-catch (f2a60f2) | . 3.3.0 (2018-06-22) . Bug Fixes . assignment to readonly property to allow running in strict mode (#270) (d062fdc) | fix #229 (c9684d4) | Get correct version of IE11 crypto (#274) (153d331) | mem issue when generating uuid (#267) (c47702c) | . Features . enforce Conventional Commit style commit messages (#282) (cc9a182) | . 3.2.1 (2018-01-16) . Bug Fixes . use msCrypto if available. Fixes #241 (#247) (1fef18b) | . 3.2.0 (2018-01-16) . Bug Fixes . remove mistakenly added typescript dependency, rollback version (standard-version will auto-increment) (09fa824) | use msCrypto if available. Fixes #241 (#247) (1fef18b) | . Features . Add v3 Support (#217) (d94f726) | . 3.1.0 (2017-06-17) . Bug Fixes . (fix) Add .npmignore file to exclude test/ and other non-essential files from packing. (#183) | Fix typo (#178) | Simple typo fix (#165) | . Features . v5 support in CLI (#197) | V5 support (#188) | . 3.0.1 (2016-11-28) . split uuid versions into separate files | . 3.0.0 (2016-11-17) . remove .parse and .unparse | . 2.0.0 . Removed uuid.BufferClass | . 1.4.0 . Improved module context detection | Removed public RNG functions | . 1.3.2 . Improve tests and handling of v1() options (Issue #24) | Expose RNG option to allow for perf testing with different generators | . 1.3.0 . Support for version 1 ids, thanks to @ctavan! | Support for node.js crypto API | De-emphasizing performance in favor of a) cryptographic quality PRNGs where available and b) more manageable code | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/uuid/CHANGELOG.html",
          "relUrl": "/node_backend/node_modules/uuid/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page20": {
          "title": "1.1.2 / 2017-09-23",
          "content": "1.1.2 / 2017-09-23 . perf: improve header token parsing speed | . 1.1.1 / 2017-03-20 . perf: hoist regular expression | . 1.1.0 / 2015-09-29 . Only accept valid field names in the field argument Ensures the resulting string is a valid HTTP header value | . | . 1.0.1 / 2015-07-08 . Fix setting empty header from empty field | perf: enable strict mode | perf: remove argument reassignments | . 1.0.0 / 2014-08-10 . Accept valid Vary header string as field | Add vary.append for low-level string manipulation | Move to jshttp orgainzation | . 0.1.0 / 2014-06-05 . Support array of fields to set | . 0.0.0 / 2014-06-04 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/vary/HISTORY.html",
          "relUrl": "/node_backend/node_modules/vary/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page21": {
          "title": "Deployment Information",
          "content": "Deployment Information . Change the Backend URL in GameEnv. For a secure “https” connection use “wss” instead of ws teacher_portfolio/assets/js/multiplayer/GameEnv.js . static socket = io(`ws://${window.location.host.split(&quot;:&quot;)[0]}:3000`); . Use the Dockerfile and docker-compose in node_backend to adjust the actual output port in the docker-compose In NGINX make sure to forward web socket traffic, here is an NGINX file from another project using socket.io. . server { server_name platformer_ws.nighthawkcodingsociety.com; location / { proxy_pass http://localhost:300; # this magic is needed for WebSocket proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; } } .",
          "url": "http://localhost:4100/Multiplayer/node_backend/",
          "relUrl": "/node_backend/",
          "date": ""
      }
      
  

  
      ,"page22": {
          "title": "Emitter",
          "content": "Emitter . Event emitter component. . Installation . $ component install component/emitter . API . Emitter(obj) . The Emitter may also be used as a mixin. For example a “plain” object may become an emitter, or you may extend an existing prototype. . As an Emitter instance: . var Emitter = require(&#39;emitter&#39;); var emitter = new Emitter; emitter.emit(&#39;something&#39;); . As a mixin: . var Emitter = require(&#39;emitter&#39;); var user = { name: &#39;tobi&#39; }; Emitter(user); user.emit(&#39;im a user&#39;); . As a prototype mixin: . var Emitter = require(&#39;emitter&#39;); Emitter(User.prototype); . Emitter#on(event, fn) . Register an event handler fn. . Emitter#once(event, fn) . Register a single-shot event handler fn, removed immediately after it is invoked the first time. . Emitter#off(event, fn) . Pass event and fn to remove a listener. | Pass event to remove all listeners on that event. | Pass nothing to remove all listeners on all events. | . Emitter#emit(event, …) . Emit an event with variable option args. . Emitter#listeners(event) . Return an array of callbacks, or an empty array. . Emitter#hasListeners(event) . Check if this emitter has event handlers. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/@socket.io/component-emitter/",
          "relUrl": "/node_backend/node_modules/@socket.io/component-emitter/",
          "date": ""
      }
      
  

  
      ,"page23": {
          "title": "Installation",
          "content": "Installation . npm install --save @types/cookie . Summary . This package contains type definitions for cookie (https://github.com/jshttp/cookie). . Details . Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/cookie. . Additional Details . Last updated: Tue, 06 Jul 2021 20:32:30 GMT | Dependencies: none | Global values: none | . Credits . These definitions were written by Pine Mizune, and Piotr Błażejewicz. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/@types/cookie/",
          "relUrl": "/node_backend/node_modules/@types/cookie/",
          "date": ""
      }
      
  

  
      ,"page24": {
          "title": "Installation",
          "content": "Installation . npm install --save @types/cors . Summary . This package contains type definitions for cors (https://github.com/expressjs/cors/). . Details . Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/cors. . index.d.ts . /// &lt;reference types=&quot;node&quot; /&gt; import { IncomingHttpHeaders } from &quot;http&quot;; type StaticOrigin = boolean | string | RegExp | Array&lt;boolean | string | RegExp&gt;; type CustomOrigin = ( requestOrigin: string | undefined, callback: (err: Error | null, origin?: StaticOrigin) =&gt; void, ) =&gt; void; declare namespace e { interface CorsRequest { method?: string | undefined; headers: IncomingHttpHeaders; } interface CorsOptions { /** * @default &#39;*&#39;&#39; */ origin?: StaticOrigin | CustomOrigin | undefined; /** * @default &#39;GET,HEAD,PUT,PATCH,POST,DELETE&#39; */ methods?: string | string[] | undefined; allowedHeaders?: string | string[] | undefined; exposedHeaders?: string | string[] | undefined; credentials?: boolean | undefined; maxAge?: number | undefined; /** * @default false */ preflightContinue?: boolean | undefined; /** * @default 204 */ optionsSuccessStatus?: number | undefined; } type CorsOptionsDelegate&lt;T extends CorsRequest = CorsRequest&gt; = ( req: T, callback: (err: Error | null, options?: CorsOptions) =&gt; void, ) =&gt; void; } declare function e&lt;T extends e.CorsRequest = e.CorsRequest&gt;( options?: e.CorsOptions | e.CorsOptionsDelegate&lt;T&gt;, ): ( req: T, res: { statusCode?: number | undefined; setHeader(key: string, value: string): any; end(): any; }, next: (err?: any) =&gt; any, ) =&gt; void; export = e; . Additional Details . Last updated: Mon, 20 Nov 2023 23:36:24 GMT | Dependencies: @types/node | . Credits . These definitions were written by Alan Plum, and Gaurav Sharma. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/@types/cors/",
          "relUrl": "/node_backend/node_modules/@types/cors/",
          "date": ""
      }
      
  

  
      ,"page25": {
          "title": "Installation",
          "content": "Installation . npm install --save @types/node . Summary . This package contains type definitions for node (https://nodejs.org/). . Details . Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/node. . Additional Details . Last updated: Thu, 07 Dec 2023 07:07:09 GMT | Dependencies: undici-types | . Credits . These definitions were written by Microsoft TypeScript, Alberto Schiabel, Alvis HT Tang, Andrew Makarov, Benjamin Toueg, Chigozirim C., David Junger, Deividas Bakanas, Eugene Y. Q. Shen, Hannes Magnusson, Huw, Kelvin Jin, Klaus Meinhardt, Lishude, Mariusz Wiktorczyk, Mohsen Azimi, Nicolas Even, Nikita Galkin, Parambir Singh, Sebastian Silbermann, Thomas den Hollander, Wilco Bakker, wwwy3y3, Samuel Ainsworth, Kyle Uehlein, Thanik Bhongbhibhat, Marcin Kopacz, Trivikram Kamat, Junxiao Shi, Ilia Baryshnikov, ExE Boss, Piotr Błażejewicz, Anna Henningsen, Victor Perin, Yongsheng Zhang, NodeJS Contributors, Linus Unnebäck, wafuwafu13, Matteo Collina, and Dmitry Semigradsky. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/@types/node/",
          "relUrl": "/node_backend/node_modules/@types/node/",
          "date": ""
      }
      
  

  
      ,"page26": {
          "title": "accepts",
          "content": "accepts . . Higher level content negotiation based on negotiator. Extracted from koa for general use. . In addition to negotiator, it allows: . Allows types as an array or arguments list, ie ([&#39;text/html&#39;, &#39;application/json&#39;]) as well as (&#39;text/html&#39;, &#39;application/json&#39;). | Allows type shorthands such as json. | Returns false when no types match | Treats non-existent headers as * | . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install accepts . API . var accepts = require(&#39;accepts&#39;) . accepts(req) . Create a new Accepts object for the given req. . .charset(charsets) . Return the first accepted charset. If nothing in charsets is accepted, then false is returned. . .charsets() . Return the charsets that the request accepts, in the order of the client’s preference (most preferred first). . .encoding(encodings) . Return the first accepted encoding. If nothing in encodings is accepted, then false is returned. . .encodings() . Return the encodings that the request accepts, in the order of the client’s preference (most preferred first). . .language(languages) . Return the first accepted language. If nothing in languages is accepted, then false is returned. . .languages() . Return the languages that the request accepts, in the order of the client’s preference (most preferred first). . .type(types) . Return the first accepted type (and it is returned as the same text as what appears in the types array). If nothing in types is accepted, then false is returned. . The types array can contain full MIME types or file extensions. Any value that is not a full MIME types is passed to require(&#39;mime-types&#39;).lookup. . .types() . Return the types that the request accepts, in the order of the client’s preference (most preferred first). . Examples . Simple type negotiation . This simple example shows how to use accepts to return a different typed respond body based on what the client wants to accept. The server lists it’s preferences in order and will get back the best match between the client and server. . var accepts = require(&#39;accepts&#39;) var http = require(&#39;http&#39;) function app (req, res) { var accept = accepts(req) // the order of this list is significant; should be server preferred order switch (accept.type([&#39;json&#39;, &#39;html&#39;])) { case &#39;json&#39;: res.setHeader(&#39;Content-Type&#39;, &#39;application/json&#39;) res.write(&#39;{&quot;hello&quot;:&quot;world!&quot;}&#39;) break case &#39;html&#39;: res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;) res.write(&#39;&lt;b&gt;hello, world!&lt;/b&gt;&#39;) break default: // the fallback is text/plain, so no need to specify it above res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;) res.write(&#39;hello, world!&#39;) break } res.end() } http.createServer(app).listen(3000) . You can test this out with the cURL program: . curl -I -H&#39;Accept: text/html&#39; http://localhost:3000/ . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/accepts/",
          "relUrl": "/node_backend/node_modules/accepts/",
          "date": ""
      }
      
  

  
      ,"page27": {
          "title": "base64id",
          "content": "base64id . Node.js module that generates a base64 id. . Uses crypto.randomBytes when available, falls back to unsafe methods for node.js &lt;= 0.4. . To increase performance, random bytes are buffered to minimize the number of synchronous calls to crypto.randomBytes. . Installation . $ npm install base64id . Usage . var base64id = require(‘base64id’); . var id = base64id.generateId(); .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/base64id/",
          "relUrl": "/node_backend/node_modules/base64id/",
          "date": ""
      }
      
  

  
      ,"page28": {
          "title": "cookie",
          "content": "cookie . . Basic HTTP cookie parser and serializer for HTTP servers. . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install cookie . API . var cookie = require(&#39;cookie&#39;); . cookie.parse(str, options) . Parse an HTTP Cookie header string and returning an object of all cookie name-value pairs. The str argument is the string representing a Cookie header value and options is an optional object containing additional parsing options. . var cookies = cookie.parse(&#39;foo=bar; equation=E%3Dmc%5E2&#39;); // { foo: &#39;bar&#39;, equation: &#39;E=mc^2&#39; } . Options . cookie.parse accepts these properties in the options object. . decode . Specifies a function that will be used to decode a cookie’s value. Since the value of a cookie has a limited character set (and must be a simple string), this function can be used to decode a previously-encoded cookie value into a JavaScript string or other object. . The default function is the global decodeURIComponent, which will decode any URL-encoded sequences into their byte representations. . note if an error is thrown from this function, the original, non-decoded cookie value will be returned as the cookie’s value. . cookie.serialize(name, value, options) . Serialize a cookie name-value pair into a Set-Cookie header string. The name argument is the name for the cookie, the value argument is the value to set the cookie to, and the options argument is an optional object containing additional serialization options. . var setCookie = cookie.serialize(&#39;foo&#39;, &#39;bar&#39;); // foo=bar . Options . cookie.serialize accepts these properties in the options object. . domain . Specifies the value for the Domain Set-Cookie attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain. . encode . Specifies a function that will be used to encode a cookie’s value. Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode a value into a string suited for a cookie’s value. . The default function is the global encodeURIComponent, which will encode a JavaScript string into UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range. . expires . Specifies the Date object to be the value for the Expires Set-Cookie attribute. By default, no expiration is set, and most clients will consider this a “non-persistent cookie” and will delete it on a condition like exiting a web browser application. . note the cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. . httpOnly . Specifies the boolean value for the HttpOnly Set-Cookie attribute. When truthy, the HttpOnly attribute is set, otherwise it is not. By default, the HttpOnly attribute is not set. . note be careful when setting this to true, as compliant clients will not allow client-side JavaScript to see the cookie in document.cookie. . maxAge . Specifies the number (in seconds) to be the value for the Max-Age Set-Cookie attribute. The given number will be converted to an integer by rounding down. By default, no maximum age is set. . note the cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. . path . Specifies the value for the Path Set-Cookie attribute. By default, the path is considered the “default path”. . sameSite . Specifies the boolean or string to be the value for the SameSite Set-Cookie attribute. . true will set the SameSite attribute to Strict for strict same site enforcement. | false will not set the SameSite attribute. | &#39;lax&#39; will set the SameSite attribute to Lax for lax same site enforcement. | &#39;none&#39; will set the SameSite attribute to None for an explicit cross-site cookie. | &#39;strict&#39; will set the SameSite attribute to Strict for strict same site enforcement. | . More information about the different enforcement levels can be found in the specification. . note This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it. . secure . Specifies the boolean value for the Secure Set-Cookie attribute. When truthy, the Secure attribute is set, otherwise it is not. By default, the Secure attribute is not set. . note be careful when setting this to true, as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection. . Example . The following example uses this module in conjunction with the Node.js core HTTP server to prompt a user for their name and display it back on future visits. . var cookie = require(&#39;cookie&#39;); var escapeHtml = require(&#39;escape-html&#39;); var http = require(&#39;http&#39;); var url = require(&#39;url&#39;); function onRequest(req, res) { // Parse the query string var query = url.parse(req.url, true, true).query; if (query &amp;&amp; query.name) { // Set a new cookie with the name res.setHeader(&#39;Set-Cookie&#39;, cookie.serialize(&#39;name&#39;, String(query.name), { httpOnly: true, maxAge: 60 * 60 * 24 * 7 // 1 week })); // Redirect back after setting cookie res.statusCode = 302; res.setHeader(&#39;Location&#39;, req.headers.referer || &#39;/&#39;); res.end(); return; } // Parse the cookies on the request var cookies = cookie.parse(req.headers.cookie || &#39;&#39;); // Get the visitor name set in the cookie var name = cookies.name; res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=UTF-8&#39;); if (name) { res.write(&#39;&lt;p&gt;Welcome back, &lt;b&gt;&#39; + escapeHtml(name) + &#39;&lt;/b&gt;!&lt;/p&gt;&#39;); } else { res.write(&#39;&lt;p&gt;Hello, new visitor!&lt;/p&gt;&#39;); } res.write(&#39;&lt;form method=&quot;GET&quot;&gt;&#39;); res.write(&#39;&lt;input placeholder=&quot;enter your name&quot; name=&quot;name&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Set Name&quot;&gt;&#39;); res.end(&#39;&lt;/form&gt;&#39;); } http.createServer(onRequest).listen(3000); . Testing . $ npm test . Benchmark . $ npm run bench &gt; cookie@0.4.1 bench &gt; node benchmark/index.js node@16.13.1 v8@9.4.146.24-node.14 uv@1.42.0 zlib@1.2.11 brotli@1.0.9 ares@1.18.1 modules@93 nghttp2@1.45.1 napi@8 llhttp@6.0.4 openssl@1.1.1l+quic cldr@39.0 icu@69.1 tz@2021a unicode@13.0 ngtcp2@0.1.0-DEV nghttp3@0.1.0-DEV &gt; node benchmark/parse-top.js cookie.parse - top sites 15 tests completed. parse accounts.google.com x 504,358 ops/sec ±6.55% (171 runs sampled) parse apple.com x 1,369,991 ops/sec ±0.84% (189 runs sampled) parse cloudflare.com x 360,669 ops/sec ±3.75% (182 runs sampled) parse docs.google.com x 521,496 ops/sec ±4.90% (180 runs sampled) parse drive.google.com x 553,514 ops/sec ±0.59% (189 runs sampled) parse en.wikipedia.org x 286,052 ops/sec ±0.62% (188 runs sampled) parse linkedin.com x 178,817 ops/sec ±0.61% (192 runs sampled) parse maps.google.com x 284,585 ops/sec ±0.68% (188 runs sampled) parse microsoft.com x 161,230 ops/sec ±0.56% (192 runs sampled) parse play.google.com x 352,144 ops/sec ±1.01% (181 runs sampled) parse plus.google.com x 275,204 ops/sec ±7.78% (156 runs sampled) parse support.google.com x 339,493 ops/sec ±1.02% (191 runs sampled) parse www.google.com x 286,110 ops/sec ±0.90% (191 runs sampled) parse youtu.be x 548,557 ops/sec ±0.60% (184 runs sampled) parse youtube.com x 545,293 ops/sec ±0.65% (191 runs sampled) &gt; node benchmark/parse.js cookie.parse - generic 6 tests completed. simple x 1,266,646 ops/sec ±0.65% (191 runs sampled) decode x 838,413 ops/sec ±0.60% (191 runs sampled) unquote x 877,820 ops/sec ±0.72% (189 runs sampled) duplicates x 516,680 ops/sec ±0.61% (191 runs sampled) 10 cookies x 156,874 ops/sec ±0.52% (189 runs sampled) 100 cookies x 14,663 ops/sec ±0.53% (191 runs sampled) . References . RFC 6265: HTTP State Management Mechanism | Same-site Cookies | . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/cookie/",
          "relUrl": "/node_backend/node_modules/cookie/",
          "date": ""
      }
      
  

  
      ,"page29": {
          "title": "cors",
          "content": "cors . . CORS is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options. . Follow me (@troygoode) on Twitter! . Installation | Usage Simple Usage | Enable CORS for a Single Route | Configuring CORS | Configuring CORS Asynchronously | Enabling CORS Pre-Flight | . | Configuration Options | Demo | License | Author | . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install cors . Usage . Simple Usage (Enable All CORS Requests) . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() app.use(cors()) app.get(&#39;/products/:id&#39;, function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for all origins!&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Enable CORS for a Single Route . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() app.get(&#39;/products/:id&#39;, cors(), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for a Single Route&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Configuring CORS . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() var corsOptions = { origin: &#39;http://example.com&#39;, optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204 } app.get(&#39;/products/:id&#39;, cors(corsOptions), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for only example.com.&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Configuring CORS w/ Dynamic Origin . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() var whitelist = [&#39;http://example1.com&#39;, &#39;http://example2.com&#39;] var corsOptions = { origin: function (origin, callback) { if (whitelist.indexOf(origin) !== -1) { callback(null, true) } else { callback(new Error(&#39;Not allowed by CORS&#39;)) } } } app.get(&#39;/products/:id&#39;, cors(corsOptions), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for a whitelisted domain.&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . If you do not want to block REST tools or server-to-server requests, add a !origin check in the origin function like so: . var corsOptions = { origin: function (origin, callback) { if (whitelist.indexOf(origin) !== -1 || !origin) { callback(null, true) } else { callback(new Error(&#39;Not allowed by CORS&#39;)) } } } . Enabling CORS Pre-Flight . Certain CORS requests are considered ‘complex’ and require an initial OPTIONS request (called the “pre-flight request”). An example of a ‘complex’ CORS request is one that uses an HTTP verb other than GET/HEAD/POST (such as DELETE) or that uses custom headers. To enable pre-flighting, you must add a new OPTIONS handler for the route you want to support: . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() app.options(&#39;/products/:id&#39;, cors()) // enable pre-flight request for DELETE request app.del(&#39;/products/:id&#39;, cors(), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for all origins!&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . You can also enable pre-flight across-the-board like so: . app.options(&#39;*&#39;, cors()) // include before other routes . Configuring CORS Asynchronously . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() var whitelist = [&#39;http://example1.com&#39;, &#39;http://example2.com&#39;] var corsOptionsDelegate = function (req, callback) { var corsOptions; if (whitelist.indexOf(req.header(&#39;Origin&#39;)) !== -1) { corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response } else { corsOptions = { origin: false } // disable CORS for this request } callback(null, corsOptions) // callback expects two parameters: error and options } app.get(&#39;/products/:id&#39;, cors(corsOptionsDelegate), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for a whitelisted domain.&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Configuration Options . origin: Configures the Access-Control-Allow-Origin CORS header. Possible values: Boolean - set origin to true to reflect the request origin, as defined by req.header(&#39;Origin&#39;), or set it to false to disable CORS. | String - set origin to a specific origin. For example if you set it to &quot;http://example.com&quot; only requests from “http://example.com” will be allowed. | RegExp - set origin to a regular expression pattern which will be used to test the request origin. If it’s a match, the request origin will be reflected. For example the pattern /example .com$/ will reflect any request that is coming from an origin ending with “example.com”. | Array - set origin to an array of valid origins. Each origin can be a String or a RegExp. For example [&quot;http://example1.com&quot;, / .example2 .com$/] will accept any request from “http://example1.com” or from a subdomain of “example2.com”. | Function - set origin to a function implementing some custom logic. The function takes the request origin as the first parameter and a callback (which expects the signature err [object], allow [bool]) as the second. | . | methods: Configures the Access-Control-Allow-Methods CORS header. Expects a comma-delimited string (ex: ‘GET,PUT,POST’) or an array (ex: [&#39;GET&#39;, &#39;PUT&#39;, &#39;POST&#39;]). | allowedHeaders: Configures the Access-Control-Allow-Headers CORS header. Expects a comma-delimited string (ex: ‘Content-Type,Authorization’) or an array (ex: [&#39;Content-Type&#39;, &#39;Authorization&#39;]). If not specified, defaults to reflecting the headers specified in the request’s Access-Control-Request-Headers header. | exposedHeaders: Configures the Access-Control-Expose-Headers CORS header. Expects a comma-delimited string (ex: ‘Content-Range,X-Content-Range’) or an array (ex: [&#39;Content-Range&#39;, &#39;X-Content-Range&#39;]). If not specified, no custom headers are exposed. | credentials: Configures the Access-Control-Allow-Credentials CORS header. Set to true to pass the header, otherwise it is omitted. | maxAge: Configures the Access-Control-Max-Age CORS header. Set to an integer to pass the header, otherwise it is omitted. | preflightContinue: Pass the CORS preflight response to the next handler. | optionsSuccessStatus: Provides a status code to use for successful OPTIONS requests, since some legacy browsers (IE11, various SmartTVs) choke on 204. | . The default configuration is the equivalent of: . { &quot;origin&quot;: &quot;*&quot;, &quot;methods&quot;: &quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;, &quot;preflightContinue&quot;: false, &quot;optionsSuccessStatus&quot;: 204 } . For details on the effect of each CORS header, read this article on HTML5 Rocks. . Demo . A demo that illustrates CORS working (and not working) using jQuery is available here: http://node-cors-client.herokuapp.com/ . Code for that demo can be found here: . Client: https://github.com/TroyGoode/node-cors-client | Server: https://github.com/TroyGoode/node-cors-server | . License . MIT License . Author . Troy Goode (troygoode@gmail.com) .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/cors/",
          "relUrl": "/node_backend/node_modules/cors/",
          "date": ""
      }
      
  

  
      ,"page30": {
          "title": "debug",
          "content": "debug . . . A tiny JavaScript debugging utility modelled after Node.js core’s debugging technique. Works in Node.js and web browsers. . Installation . $ npm install debug . Usage . debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. . Example app.js: . var debug = require(&#39;debug&#39;)(&#39;http&#39;) , http = require(&#39;http&#39;) , name = &#39;My App&#39;; // fake app debug(&#39;booting %o&#39;, name); http.createServer(function(req, res){ debug(req.method + &#39; &#39; + req.url); res.end(&#39;hello n&#39;); }).listen(3000, function(){ debug(&#39;listening&#39;); }); // fake worker of some kind require(&#39;./worker&#39;); . Example worker.js: . var a = require(&#39;debug&#39;)(&#39;worker:a&#39;) , b = require(&#39;debug&#39;)(&#39;worker:b&#39;); function work() { a(&#39;doing lots of uninteresting work&#39;); setTimeout(work, Math.random() * 1000); } work(); function workb() { b(&#39;doing some work&#39;); setTimeout(workb, Math.random() * 2000); } workb(); . The DEBUG environment variable is then used to enable these based on space or comma-delimited names. . Here are some examples: . . Windows command prompt notes . CMD . On Windows the environment variable is set using the set command. . set DEBUG=*,-not_this . Example: . set DEBUG=* &amp; node app.js . PowerShell (VS Code default) . PowerShell uses different syntax to set environment variables. . $env:DEBUG = &quot;*,-not_this&quot; . Example: . $env:DEBUG=&#39;app&#39;;node app.js . Then, run the program to be debugged as usual. . npm script example: . &quot;windowsDebug&quot;: &quot;@powershell -Command $env:DEBUG=&#39;*&#39;;node app.js&quot;, . Namespace Colors . Every debug instance has a color generated for it based on its namespace name. This helps when visually parsing the debug output to identify which debug instance a debug line belongs to. . Node.js . In Node.js, colors are enabled when stderr is a TTY. You also should install the supports-color module alongside debug, otherwise debug will only use a small handful of basic colors. . . Web Browser . Colors are also enabled on “Web Inspectors” that understand the %c formatting option. These are WebKit web inspectors, Firefox (since version 31) and the Firebug plugin for Firefox (any version). . . Millisecond diff . When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the “+NNNms” will show you how much time was spent between calls. . . When stdout is not a TTY, Date#toISOString() is used, making it more useful for logging the debug information as shown below: . . Conventions . If you’re using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use “:” to separate features. For example “bodyParser” from Connect would then be “connect:bodyParser”. If you append a “*” to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable. You can then use it for normal output as well as debug output. . Wildcards . The * character may be used as a wildcard. Suppose for example your library has debuggers named “connect:bodyParser”, “connect:compress”, “connect:session”, instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session, you may simply do DEBUG=connect:*, or to run everything using this module simply use DEBUG=*. . You can also exclude specific debuggers by prefixing them with a “-“ character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with “connect:”. . Environment Variables . When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: . Name Purpose . DEBUG | Enables/disables specific debugging namespaces. | . DEBUG_HIDE_DATE | Hide date from debug output (non-TTY). | . DEBUG_COLORS | Whether or not to use colors in the debug output. | . DEBUG_DEPTH | Object inspection depth. | . DEBUG_SHOW_HIDDEN | Shows hidden properties on inspected objects. | . Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o/%O formatters. See the Node.js documentation for util.inspect() for the complete list. . Formatters . Debug uses printf-style formatting. Below are the officially supported formatters: . Formatter Representation . %O | Pretty-print an Object on multiple lines. | . %o | Pretty-print an Object all on a single line. | . %s | String. | . %d | Number (both integer and float). | . %j | JSON. Replaced with the string ‘[Circular]’ if the argument contains circular references. | . %% | Single percent sign (‘%’). This does not consume an argument. | . Custom formatters . You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h, you could do something like: . const createDebug = require(&#39;debug&#39;) createDebug.formatters.h = (v) =&gt; { return v.toString(&#39;hex&#39;) } // …elsewhere const debug = createDebug(&#39;foo&#39;) debug(&#39;this is hex: %h&#39;, new Buffer(&#39;hello world&#39;)) // foo this is hex: 68656c6c6f20776f726c6421 +0ms . Browser Support . You can build a browser-ready script using browserify, or just use the browserify-as-a-service build, if you don’t want to build it yourself. . Debug’s enable state is currently persisted by localStorage. Consider the situation shown below where you have worker:a and worker:b, and wish to debug both. You can enable this using localStorage.debug: . localStorage.debug = &#39;worker:*&#39; . And then refresh the page. . a = debug(&#39;worker:a&#39;); b = debug(&#39;worker:b&#39;); setInterval(function(){ a(&#39;doing some work&#39;); }, 1000); setInterval(function(){ b(&#39;doing some work&#39;); }, 1200); . In Chromium-based web browsers (e.g. Brave, Chrome, and Electron), the JavaScript console will—by default—only show messages logged by debug if the “Verbose” log level is enabled. . . Output streams . By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: . Example stdout.js: . var debug = require(&#39;debug&#39;); var error = debug(&#39;app:error&#39;); // by default stderr is used error(&#39;goes to stderr!&#39;); var log = debug(&#39;app:log&#39;); // set this namespace to log via console.log log.log = console.log.bind(console); // don&#39;t forget to bind to console! log(&#39;goes to stdout&#39;); error(&#39;still goes to stderr!&#39;); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error(&#39;now goes to stdout via console.info&#39;); log(&#39;still goes to stdout, but via console.info now&#39;); . Extend . You can simply extend debugger . const log = require(&#39;debug&#39;)(&#39;auth&#39;); //creates new debug instance with extended namespace const logSign = log.extend(&#39;sign&#39;); const logLogin = log.extend(&#39;login&#39;); log(&#39;hello&#39;); // auth hello logSign(&#39;hello&#39;); //auth:sign hello logLogin(&#39;hello&#39;); //auth:login hello . Set dynamically . You can also enable debug dynamically by calling the enable() method : . let debug = require(&#39;debug&#39;); console.log(1, debug.enabled(&#39;test&#39;)); debug.enable(&#39;test&#39;); console.log(2, debug.enabled(&#39;test&#39;)); debug.disable(); console.log(3, debug.enabled(&#39;test&#39;)); . print : . 1 false 2 true 3 false . Usage : enable(namespaces) namespaces can include modes separated by a colon and wildcards. . Note that calling enable() completely overrides previously set DEBUG variable : . $ DEBUG=foo node -e &#39;var dbg = require(&quot;debug&quot;); dbg.enable(&quot;bar&quot;); console.log(dbg.enabled(&quot;foo&quot;))&#39; =&gt; false . disable() . Will disable all namespaces. The functions returns the namespaces currently enabled (and skipped). This can be useful if you want to disable debugging temporarily without knowing what was enabled to begin with. . For example: . let debug = require(&#39;debug&#39;); debug.enable(&#39;foo:*,-foo:bar&#39;); let namespaces = debug.disable(); debug.enable(namespaces); . Note: There is no guarantee that the string will be identical to the initial enable string, but semantically they will be identical. . Checking whether a debug target is enabled . After you’ve created a debug instance, you can determine whether or not it is enabled by checking the enabled property: . const debug = require(&#39;debug&#39;)(&#39;http&#39;); if (debug.enabled) { // do stuff... } . You can also manually toggle this property to force the debug instance to be enabled or disabled. . Usage in child processes . Due to the way debug detects if the output is a TTY or not, colors are not shown in child processes when stderr is piped. A solution is to pass the DEBUG_COLORS=1 environment variable to the child process. For example: . worker = fork(WORKER_WRAP_PATH, [workerPath], { stdio: [ /* stdin: */ 0, /* stdout: */ &#39;pipe&#39;, /* stderr: */ &#39;pipe&#39;, &#39;ipc&#39;, ], env: Object.assign({}, process.env, { DEBUG_COLORS: 1 // without this settings, colors won&#39;t be shown }), }); worker.stderr.pipe(process.stderr, { end: false }); . Authors . TJ Holowaychuk | Nathan Rajlich | Andrew Rhyne | Josh Junon | . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . (The MIT License) . Copyright (c) 2014-2017 TJ Holowaychuk &lt;tj@vision-media.ca&gt; Copyright (c) 2018-2021 Josh Junon . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/debug/",
          "relUrl": "/node_backend/node_modules/debug/",
          "date": ""
      }
      
  

  
      ,"page31": {
          "title": "engine.io-parser",
          "content": "engine.io-parser . . This is the JavaScript parser for the engine.io protocol encoding, shared by both engine.io-client and engine.io. . How to use . Standalone . The parser can encode/decode packets, payloads, and payloads as binary with the following methods: encodePacket, decodePacket, encodePayload, decodePayload. . Example: . const parser = require(&quot;engine.io-parser&quot;); const data = Buffer.from([ 1, 2, 3, 4 ]); parser.encodePacket({ type: &quot;message&quot;, data }, encoded =&gt; { const decodedData = parser.decodePacket(encoded); // decodedData === data }); . With browserify . Engine.IO Parser is a commonjs module, which means you can include it by using require on the browser and package using browserify: . install the parser package . npm install engine.io-parser . | write your app code . const parser = require(&quot;engine.io-parser&quot;); const testBuffer = new Int8Array(10); for (let i = 0; i &lt; testBuffer.length; i++) testBuffer[i] = i; const packets = [{ type: &quot;message&quot;, data: testBuffer.buffer }, { type: &quot;message&quot;, data: &quot;hello&quot; }]; parser.encodePayload(packets, encoded =&gt; { parser.decodePayload(encoded, (packet, index, total) =&gt; { const isLast = index + 1 == total; if (!isLast) { const buffer = new Int8Array(packet.data); // testBuffer } else { const message = packet.data; // &quot;hello&quot; } }); }); . | build your app bundle . $ browserify app.js &gt; bundle.js . | include on your page . &lt;script src=&quot;/path/to/bundle.js&quot;&gt;&lt;/script&gt; . | Features . Runs on browser and node.js seamlessly | Runs inside HTML5 WebWorker | Can encode and decode packets Encodes from/to ArrayBuffer or Blob when in browser, and Buffer or ArrayBuffer in Node | . | . API . Note: cb(type) means the type is a callback function that contains a parameter of type type when called. . Node . encodePacket Encodes a packet. | Parameters Object: the packet to encode, has type and data. data: can be a String, Number, Buffer, ArrayBuffer | . | Boolean: binary support | Function: callback, returns the encoded packet (cb(String)) | . | . | decodePacket Decodes a packet. Data also available as an ArrayBuffer if requested. | Returns data as String or (Blob on browser, ArrayBuffer on Node) | Parameters String | ArrayBuffer: the packet to decode, has type and data | . | String: optional, the binary type | . | . | encodePayload Encodes multiple messages (payload). | If any contents are binary, they will be encoded as base64 strings. Base64 encoded strings are marked with a b before the length specifier | Parameters Array: an array of packets | Function: callback, returns the encoded payload (cb(String)) | . | . | decodePayload Decodes data when a payload is maybe expected. Possible binary contents are decoded from their base64 representation. | Parameters String: the payload | Function: callback, returns (cb(Object: packet, Number:packet index, Number:packet total)) | . | . | . Tests . Standalone tests can be run with npm test which will run the node.js tests. . Browser tests are run using zuul. (You must have zuul setup with a saucelabs account.) . You can run the tests locally using the following command: . npm run test:browser . Support . The support channels for engine.io-parser are the same as socket.io: . irc.freenode.net #socket.io | Github Discussions | Website | . Development . To contribute patches, run tests or benchmarks, make sure to clone the repository: . git clone git://github.com/socketio/engine.io-parser.git . Then: . cd engine.io-parser npm ci . See the Tests section above for how to run tests before submitting any patches. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/engine.io-parser/",
          "relUrl": "/node_backend/node_modules/engine.io-parser/",
          "date": ""
      }
      
  

  
      ,"page32": {
          "title": "Engine.IO: the realtime engine",
          "content": "Engine.IO: the realtime engine . . Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO. . How to use . Server . (A) Listening on a port . const engine = require(&#39;engine.io&#39;); const server = engine.listen(80); server.on(&#39;connection&#39;, socket =&gt; { socket.send(&#39;utf 8 string&#39;); socket.send(Buffer.from([0, 1, 2, 3, 4, 5])); // binary data }); . (B) Intercepting requests for a http.Server . const engine = require(&#39;engine.io&#39;); const http = require(&#39;http&#39;).createServer().listen(3000); const server = engine.attach(http); server.on(&#39;connection&#39;, socket =&gt; { socket.on(&#39;message&#39;, data =&gt; { }); socket.on(&#39;close&#39;, () =&gt; { }); }); . (C) Passing in requests . const engine = require(&#39;engine.io&#39;); const server = new engine.Server(); server.on(&#39;connection&#39;, socket =&gt; { socket.send(&#39;hi&#39;); }); // … httpServer.on(&#39;upgrade&#39;, (req, socket, head) =&gt; { server.handleUpgrade(req, socket, head); }); httpServer.on(&#39;request&#39;, (req, res) =&gt; { server.handleRequest(req, res); }); . Client . &lt;script src=&quot;/path/to/engine.io.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const socket = new eio.Socket(&#39;ws://localhost/&#39;); socket.on(&#39;open&#39;, () =&gt; { socket.on(&#39;message&#39;, data =&gt; {}); socket.on(&#39;close&#39;, () =&gt; {}); }); &lt;/script&gt; . For more information on the client refer to the engine-client repository. . What features does it have? . Maximum reliability. Connections are established even in the presence of: proxies and load balancers. | personal firewall and antivirus software. | for more information refer to Goals and Architecture sections | . | Minimal client size aided by: lazy loading of flash transports. | lack of redundant transports. | . | Scalable load balancer friendly | . | Future proof | 100% Node.JS core style No API sugar (left for higher level projects) | . | . API . Server . . . Top-level . These are exposed by require(&#39;engine.io&#39;): . Events . flush Called when a socket buffer is being flushed. | Arguments Socket: socket being flushed | Array: write buffer | . | . | drain Called when a socket buffer is drained | Arguments Socket: socket being flushed | . | . | . Properties . protocol (Number): protocol revision number | Server: Server class constructor | Socket: Socket class constructor | Transport (Function): transport constructor | transports (Object): map of available transports | . Methods . () Returns a new Server instance. If the first argument is an http.Server then the new Server instance will be attached to it. Otherwise, the arguments are passed directly to the Server constructor. | Parameters http.Server: optional, server to attach to. | Object: optional, options object (see Server#constructor api docs below) | . | . The following are identical ways to instantiate a server and then attach it. . | . const httpServer; // previously created with `http.createServer();` from node.js api. // create a server first, and then attach const eioServer = require(&#39;engine.io&#39;).Server(); eioServer.attach(httpServer); // or call the module as a function to get `Server` const eioServer = require(&#39;engine.io&#39;)(); eioServer.attach(httpServer); // immediately attach const eioServer = require(&#39;engine.io&#39;)(httpServer); // with custom options const eioServer = require(&#39;engine.io&#39;)(httpServer, { maxHttpBufferSize: 1e3 }); . listen Creates an http.Server which listens on the given port and attaches WS to it. It returns 501 Not Implemented for regular http requests. | Parameters Number: port to listen on. | Object: optional, options object | Function: callback for listen. | . | Options All options from Server.attach method, documented below. | Additionally See Server constructor below for options you can pass for creating the new Server | . | Returns Server | . | . const engine = require(&#39;engine.io&#39;); const server = engine.listen(3000, { pingTimeout: 2000, pingInterval: 10000 }); server.on(&#39;connection&#39;, /* ... */); . attach Captures upgrade requests for a http.Server. In other words, makes a regular http.Server WebSocket-compatible. | Parameters http.Server: server to attach to. | Object: optional, options object | . | Options All options from Server.attach method, documented below. | Additionally See Server constructor below for options you can pass for creating the new Server | . | Returns Server a new Server instance. | . | . const engine = require(&#39;engine.io&#39;); const httpServer = require(&#39;http&#39;).createServer().listen(3000); const server = engine.attach(httpServer, { wsEngine: require(&#39;eiows&#39;).Server // requires having eiows as dependency }); server.on(&#39;connection&#39;, /* ... */); . Server . The main server/manager. Inherits from EventEmitter. . Events . connection Fired when a new connection is established. | Arguments Socket: a Socket object | . | . | initial_headers Fired on the first request of the connection, before writing the response headers | Arguments headers (Object): a hash of headers | req (http.IncomingMessage): the request | . | . | headers Fired on the all requests of the connection, before writing the response headers | Arguments headers (Object): a hash of headers | req (http.IncomingMessage): the request | . | . | connection_error Fired when an error occurs when establishing the connection. | Arguments error: an object with following properties: req (http.IncomingMessage): the request that was dropped | code (Number): one of Server.errors | message (string): one of Server.errorMessages | context (Object): extra info about the error | . | . | . | . Code Message . 0 | “Transport unknown” | . 1 | “Session ID unknown” | . 2 | “Bad handshake method” | . 3 | “Bad request” | . 4 | “Forbidden” | . 5 | “Unsupported protocol version” | . Properties . Important: if you plan to use Engine.IO in a scalable way, please keep in mind the properties below will only reflect the clients connected to a single process. . clients (Object): hash of connected clients by id. | clientsCount (Number): number of connected clients. | . Methods . constructor Initializes the server | Parameters Object: optional, options object | . | Options pingTimeout (Number): how many ms without a pong packet to consider the connection closed (20000) | pingInterval (Number): how many ms before sending a new ping packet (25000) | upgradeTimeout (Number): how many ms before an uncompleted transport upgrade is cancelled (10000) | maxHttpBufferSize (Number): how many bytes or characters a message can be, before closing the session (to avoid DoS). Default value is 1E6. | allowRequest (Function): A function that receives a given handshake or upgrade request as its first parameter, and can decide whether to continue or not. The second argument is a function that needs to be called with the decided information: fn(err, success), where success is a boolean value where false means that the request is rejected, and err is an error code. | transports (&lt;Array&gt; String): transports to allow connections to ([&#39;polling&#39;, &#39;websocket&#39;]) | allowUpgrades (Boolean): whether to allow transport upgrades (true) | perMessageDeflate (Object|Boolean): parameters of the WebSocket permessage-deflate extension (see ws module api docs). Set to true to enable. (defaults to false) threshold (Number): data is compressed only if the byte size is above this value (1024) | . | httpCompression (Object|Boolean): parameters of the http compression for the polling transports (see zlib api docs). Set to false to disable. (true) threshold (Number): data is compressed only if the byte size is above this value (1024) | . | cookie (Object|Boolean): configuration of the cookie that contains the client sid to send as part of handshake response headers. This cookie might be used for sticky-session. Defaults to not sending any cookie (false). See here for all supported options. | wsEngine (Function): what WebSocket server implementation to use. Specified module must conform to the ws interface (see ws module api docs). Default value is ws. An alternative c++ addon is also available by installing eiows module. | cors (Object): the options that will be forwarded to the cors module. See there for all available options. Defaults to no CORS allowed. | initialPacket (Object): an optional packet which will be concatenated to the handshake packet emitted by Engine.IO. | allowEIO3 (Boolean): whether to support v3 Engine.IO clients (defaults to false) | . | . | close Closes all clients | Returns Server for chaining | . | handleRequest Called internally when a Engine request is intercepted. | Parameters http.IncomingMessage: a node request object | http.ServerResponse: a node response object | . | Returns Server for chaining | . | handleUpgrade Called internally when a Engine ws upgrade is intercepted. | Parameters (same as upgrade event) http.IncomingMessage: a node request object | net.Stream: TCP socket for the request | Buffer: legacy tail bytes | . | Returns Server for chaining | . | attach Attach this Server instance to an http.Server | Captures upgrade requests for a http.Server. In other words, makes a regular http.Server WebSocket-compatible. | Parameters http.Server: server to attach to. | Object: optional, options object | . | Options path (String): name of the path to capture (/engine.io). | destroyUpgrade (Boolean): destroy unhandled upgrade requests (true) | destroyUpgradeTimeout (Number): milliseconds after which unhandled requests are ended (1000) | . | . | generateId Generate a socket id. | Overwrite this method to generate your custom socket id. | Parameters http.IncomingMessage: a node request object | . | Returns A socket id for connected client. | . | . . . Socket . A representation of a client. Inherits from EventEmitter. . Events . close Fired when the client is disconnected. | Arguments String: reason for closing | Object: description object (optional) | . | . | message Fired when the client sends a message. | Arguments String or Buffer: Unicode string or Buffer with binary contents | . | . | error Fired when an error occurs. | Arguments Error: error object | . | . | upgrading Fired when the client starts the upgrade to a better transport like WebSocket. | Arguments Object: the transport | . | . | upgrade Fired when the client completes the upgrade to a better transport like WebSocket. | Arguments Object: the transport | . | . | flush Called when the write buffer is being flushed. | Arguments Array: write buffer | . | . | drain Called when the write buffer is drained | . | packet Called when a socket received a packet (message, ping) | Arguments type: packet type | data: packet data (if type is message) | . | . | packetCreate Called before a socket sends a packet (message, ping) | Arguments type: packet type | data: packet data (if type is message) | . | . | heartbeat Called when ping or pong packed is received (depends of client version) | . | . Properties . id (String): unique identifier | server (Server): engine parent reference | request (http.IncomingMessage): request that originated the Socket | upgraded (Boolean): whether the transport has been upgraded | readyState (String): opening | open | closing | closed | . | transport (Transport): transport reference | . Methods . send: Sends a message, performing message = toString(arguments[0]) unless sending binary data, which is sent as is. | Parameters String |  Buffer | ArrayBuffer | ArrayBufferView: a string or any object implementing toString(), with outgoing data, or a Buffer or ArrayBuffer with binary data. Also any ArrayBufferView can be sent as is. | . | Object: optional, options object | Function: optional, a callback executed when the message gets flushed out by the transport | . | Options compress (Boolean): whether to compress sending data. This option might be ignored and forced to be true when using polling. (true) | . | Returns Socket for chaining | . | close Disconnects the client | Returns Socket for chaining | . | . Client . . . Exposed in the eio global namespace (in the browser), or by require(&#39;engine.io-client&#39;) (in Node.JS). . For the client API refer to the engine-client repository. . Debug / logging . Engine.IO is powered by debug. In order to see all the debug output, run your app with the environment variable DEBUG including the desired scope. . To see the output from all of Engine.IO’s debugging scopes you can use: . DEBUG=engine* node myapp . Transports . polling: XHR / JSONP polling transport. | websocket: WebSocket transport. | . Plugins . engine.io-conflation: Makes conflation and aggregation of messages straightforward. | . Support . The support channels for engine.io are the same as socket.io: . irc.freenode.net #socket.io | Google Groups | Website | . Development . To contribute patches, run tests or benchmarks, make sure to clone the repository: . git clone git://github.com/LearnBoost/engine.io.git . Then: . cd engine.io npm install . Tests . Tests run with npm test. It runs the server tests that are aided by the usage of engine.io-client. . Make sure npm install is run first. . Goals . The main goal of Engine is ensuring the most reliable realtime communication. Unlike the previous Socket.IO core, it always establishes a long-polling connection first, then tries to upgrade to better transports that are “tested” on the side. . During the lifetime of the Socket.IO projects, we’ve found countless drawbacks to relying on HTML5 WebSocket or Flash Socket as the first connection mechanisms. . Both are clearly the right way of establishing a bidirectional communication, with HTML5 WebSocket being the way of the future. However, to answer most business needs, alternative traditional HTTP 1.1 mechanisms are just as good as delivering the same solution. . WebSocket based connections have two fundamental benefits: . Better server performance A: Load balancers Load balancing a long polling connection poses a serious architectural nightmare since requests can come from any number of open sockets by the user agent, but they all need to be routed to the process and computer that owns the Engine connection. This negatively impacts RAM and CPU usage. | B: Network traffic WebSocket is designed around the premise that each message frame has to be surrounded by the least amount of data. In HTTP 1.1 transports, each message frame is surrounded by HTTP headers and chunked encoding frames. If you try to send the message “Hello world” with xhr-polling, the message ultimately becomes larger than if you were to send it with WebSocket. | C: Lightweight parser As an effect of B, the server has to do a lot more work to parse the network data and figure out the message when traditional HTTP requests are used (as in long polling). This means that another advantage of WebSocket is less server CPU usage. | . | Better user experience . Due to the reasons stated in point 1, the most important effect of being able to establish a WebSocket connection is raw data transfer speed, which translates in some cases in better user experience. . Applications with heavy realtime interaction (such as games) will benefit greatly, whereas applications like realtime chat (Gmail/Facebook), newsfeeds (Facebook) or timelines (Twitter) will have negligible user experience improvements. . | Having said this, attempting to establish a WebSocket connection directly so far has proven problematic: . Proxies Many corporate proxies block WebSocket traffic. . | Personal firewall and antivirus software As a result of our research, we’ve found that at least 3 personal security applications block WebSocket traffic. . | Cloud application platforms Platforms like Heroku or No.de have had trouble keeping up with the fast-paced nature of the evolution of the WebSocket protocol. Applications therefore end up inevitably using long polling, but the seamless installation experience of Socket.IO we strive for (“require() it and it just works”) disappears. . | Some of these problems have solutions. In the case of proxies and personal programs, however, the solutions many times involve upgrading software. Experience has shown that relying on client software upgrades to deliver a business solution is fruitless: the very existence of this project has to do with a fragmented panorama of user agent distribution, with clients connecting with latest versions of the most modern user agents (Chrome, Firefox and Safari), but others with versions as low as IE 5.5. . From the user perspective, an unsuccessful WebSocket connection can translate in up to at least 10 seconds of waiting for the realtime application to begin exchanging data. This perceptively hurts user experience. . To summarize, Engine focuses on reliability and user experience first, marginal potential UX improvements and increased server performance second. Engine is the result of all the lessons learned with WebSocket in the wild. . Architecture . The main premise of Engine, and the core of its existence, is the ability to swap transports on the fly. A connection starts as xhr-polling, but it can switch to WebSocket. . The central problem this poses is: how do we switch transports without losing messages? . Engine only switches from polling to another transport in between polling cycles. Since the server closes the connection after a certain timeout when there’s no activity, and the polling transport implementation buffers messages in between connections, this ensures no message loss and optimal performance. . Another benefit of this design is that we workaround almost all the limitations of Flash Socket, such as slow connection times, increased file size (we can safely lazy load it without hurting user experience), etc. . FAQ . Can I use engine without Socket.IO ? . Absolutely. Although the recommended framework for building realtime applications is Socket.IO, since it provides fundamental features for real-world applications such as multiplexing, reconnection support, etc. . Engine is to Socket.IO what Connect is to Express. An essential piece for building realtime frameworks, but something you probably won’t be using for building actual applications. . Does the server serve the client? . No. The main reason is that Engine is meant to be bundled with frameworks. Socket.IO includes Engine, therefore serving two clients is not necessary. If you use Socket.IO, including . &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt; . has you covered. . Can I implement Engine in other languages? . Absolutely. The engine.io-protocol repository contains the most up-to-date description of the specification at all times. . License . (The MIT License) . Copyright (c) 2014 Guillermo Rauch &lt;guillermo@learnboost.com&gt; . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/engine.io/",
          "relUrl": "/node_backend/node_modules/engine.io/",
          "date": ""
      }
      
  

  
      ,"page33": {
          "title": "mime-db",
          "content": "mime-db . . This is a large database of mime types and information about them. It consists of a single, public JSON file and does not include any logic, allowing it to remain as un-opinionated as possible with an API. It aggregates data from the following sources: . http://www.iana.org/assignments/media-types/media-types.xhtml | http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types | http://hg.nginx.org/nginx/raw-file/default/conf/mime.types | . Installation . npm install mime-db . Database Download . If you’re crazy enough to use this in the browser, you can just grab the JSON file using jsDelivr. It is recommended to replace master with a release tag as the JSON format may change in the future. . https://cdn.jsdelivr.net/gh/jshttp/mime-db@master/db.json . Usage . var db = require(&#39;mime-db&#39;) // grab data on .js files var data = db[&#39;application/javascript&#39;] . Data Structure . The JSON file is a map lookup for lowercased mime types. Each mime type has the following properties: . .source - where the mime type is defined. If not set, it’s probably a custom media type. apache - Apache common media types | iana - IANA-defined media types | nginx - nginx media types | . | .extensions[] - known extensions associated with this mime type. | .compressible - whether a file of this type can be gzipped. | .charset - the default charset associated with this type, if any. | . If unknown, every property could be undefined. . Contributing . To edit the database, only make PRs against src/custom-types.json or src/custom-suffix.json. . The src/custom-types.json file is a JSON object with the MIME type as the keys and the values being an object with the following keys: . compressible - leave out if you don’t know, otherwise true/false to indicate whether the data represented by the type is typically compressible. | extensions - include an array of file extensions that are associated with the type. | notes - human-readable notes about the type, typically what the type is. | sources - include an array of URLs of where the MIME type and the associated extensions are sourced from. This needs to be a primary source; links to type aggregating sites and Wikipedia are not acceptable. | . To update the build, run npm run build. . Adding Custom Media Types . The best way to get new media types included in this library is to register them with the IANA. The community registration procedure is outlined in RFC 6838 section 5. Types registered with the IANA are automatically pulled into this library. . If that is not possible / feasible, they can be added directly here as a “custom” type. To do this, it is required to have a primary source that definitively lists the media type. If an extension is going to be listed as associateed with this media type, the source must definitively link the media type and extension as well. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/mime-db/",
          "relUrl": "/node_backend/node_modules/mime-db/",
          "date": ""
      }
      
  

  
      ,"page34": {
          "title": "mime-types",
          "content": "mime-types . . The ultimate javascript content-type utility. . Similar to the mime@1.x module, except: . No fallbacks. Instead of naively returning the first available type, mime-types simply returns false, so do var type = mime.lookup(&#39;unrecognized&#39;) || &#39;application/octet-stream&#39;. | No new Mime() business, so you could do var lookup = require(&#39;mime-types&#39;).lookup. | No .define() functionality | Bug fixes for .lookup(path) | . Otherwise, the API is compatible with mime 1.x. . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install mime-types . Adding Types . All mime types are based on mime-db, so open a PR there if you’d like to add mime types. . API . var mime = require(&#39;mime-types&#39;) . All functions return false if input is invalid or not found. . mime.lookup(path) . Lookup the content-type associated with a file. . mime.lookup(&#39;json&#39;) // &#39;application/json&#39; mime.lookup(&#39;.md&#39;) // &#39;text/markdown&#39; mime.lookup(&#39;file.html&#39;) // &#39;text/html&#39; mime.lookup(&#39;folder/file.js&#39;) // &#39;application/javascript&#39; mime.lookup(&#39;folder/.htaccess&#39;) // false mime.lookup(&#39;cats&#39;) // false . mime.contentType(type) . Create a full content-type header given a content-type or extension. When given an extension, mime.lookup is used to get the matching content-type, otherwise the given content-type is used. Then if the content-type does not already have a charset parameter, mime.charset is used to get the default charset and add to the returned content-type. . mime.contentType(&#39;markdown&#39;) // &#39;text/x-markdown; charset=utf-8&#39; mime.contentType(&#39;file.json&#39;) // &#39;application/json; charset=utf-8&#39; mime.contentType(&#39;text/html&#39;) // &#39;text/html; charset=utf-8&#39; mime.contentType(&#39;text/html; charset=iso-8859-1&#39;) // &#39;text/html; charset=iso-8859-1&#39; // from a full path mime.contentType(path.extname(&#39;/path/to/file.json&#39;)) // &#39;application/json; charset=utf-8&#39; . mime.extension(type) . Get the default extension for a content-type. . mime.extension(&#39;application/octet-stream&#39;) // &#39;bin&#39; . mime.charset(type) . Lookup the implied default charset of a content-type. . mime.charset(&#39;text/markdown&#39;) // &#39;UTF-8&#39; . var type = mime.types[extension] . A map of content-types by extension. . [extensions…] = mime.extensions[type] . A map of extensions by content-type. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/mime-types/",
          "relUrl": "/node_backend/node_modules/mime-types/",
          "date": ""
      }
      
  

  
      ,"page35": {
          "title": "ms",
          "content": "ms . . Use this package to easily convert various time formats to milliseconds. . Examples . ms(&#39;2 days&#39;) // 172800000 ms(&#39;1d&#39;) // 86400000 ms(&#39;10h&#39;) // 36000000 ms(&#39;2.5 hrs&#39;) // 9000000 ms(&#39;2h&#39;) // 7200000 ms(&#39;1m&#39;) // 60000 ms(&#39;5s&#39;) // 5000 ms(&#39;1y&#39;) // 31557600000 ms(&#39;100&#39;) // 100 ms(&#39;-3 days&#39;) // -259200000 ms(&#39;-1h&#39;) // -3600000 ms(&#39;-200&#39;) // -200 . Convert from Milliseconds . ms(60000) // &quot;1m&quot; ms(2 * 60000) // &quot;2m&quot; ms(-3 * 60000) // &quot;-3m&quot; ms(ms(&#39;10 hours&#39;)) // &quot;10h&quot; . Time Format Written-Out . ms(60000, { long: true }) // &quot;1 minute&quot; ms(2 * 60000, { long: true }) // &quot;2 minutes&quot; ms(-3 * 60000, { long: true }) // &quot;-3 minutes&quot; ms(ms(&#39;10 hours&#39;), { long: true }) // &quot;10 hours&quot; . Features . Works both in Node.js and in the browser | If a number is supplied to ms, a string with a unit is returned | If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for &#39;100&#39;) | If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned | . Related Packages . ms.macro - Run ms as a macro at build-time. | . Caught a Bug? . Fork this repository to your own GitHub account and then clone it to your local device | Link the package to the global module directory: npm link | Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, Node.js will now use your clone of ms! | As always, you can run the tests using: npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/ms/",
          "relUrl": "/node_backend/node_modules/ms/",
          "date": ""
      }
      
  

  
      ,"page36": {
          "title": "negotiator",
          "content": "negotiator . . An HTTP content negotiator for Node.js . Installation . $ npm install negotiator . API . var Negotiator = require(&#39;negotiator&#39;) . Accept Negotiation . availableMediaTypes = [&#39;text/html&#39;, &#39;text/plain&#39;, &#39;application/json&#39;] // The negotiator constructor receives a request object negotiator = new Negotiator(request) // Let&#39;s say Accept header is &#39;text/html, application/*;q=0.2, image/jpeg;q=0.8&#39; negotiator.mediaTypes() // -&gt; [&#39;text/html&#39;, &#39;image/jpeg&#39;, &#39;application/*&#39;] negotiator.mediaTypes(availableMediaTypes) // -&gt; [&#39;text/html&#39;, &#39;application/json&#39;] negotiator.mediaType(availableMediaTypes) // -&gt; &#39;text/html&#39; . You can check a working example at examples/accept.js. . Methods . mediaType() . Returns the most preferred media type from the client. . mediaType(availableMediaType) . Returns the most preferred media type from a list of available media types. . mediaTypes() . Returns an array of preferred media types ordered by the client preference. . mediaTypes(availableMediaTypes) . Returns an array of preferred media types ordered by priority from a list of available media types. . Accept-Language Negotiation . negotiator = new Negotiator(request) availableLanguages = [&#39;en&#39;, &#39;es&#39;, &#39;fr&#39;] // Let&#39;s say Accept-Language header is &#39;en;q=0.8, es, pt&#39; negotiator.languages() // -&gt; [&#39;es&#39;, &#39;pt&#39;, &#39;en&#39;] negotiator.languages(availableLanguages) // -&gt; [&#39;es&#39;, &#39;en&#39;] language = negotiator.language(availableLanguages) // -&gt; &#39;es&#39; . You can check a working example at examples/language.js. . Methods . language() . Returns the most preferred language from the client. . language(availableLanguages) . Returns the most preferred language from a list of available languages. . languages() . Returns an array of preferred languages ordered by the client preference. . languages(availableLanguages) . Returns an array of preferred languages ordered by priority from a list of available languages. . Accept-Charset Negotiation . availableCharsets = [&#39;utf-8&#39;, &#39;iso-8859-1&#39;, &#39;iso-8859-5&#39;] negotiator = new Negotiator(request) // Let&#39;s say Accept-Charset header is &#39;utf-8, iso-8859-1;q=0.8, utf-7;q=0.2&#39; negotiator.charsets() // -&gt; [&#39;utf-8&#39;, &#39;iso-8859-1&#39;, &#39;utf-7&#39;] negotiator.charsets(availableCharsets) // -&gt; [&#39;utf-8&#39;, &#39;iso-8859-1&#39;] negotiator.charset(availableCharsets) // -&gt; &#39;utf-8&#39; . You can check a working example at examples/charset.js. . Methods . charset() . Returns the most preferred charset from the client. . charset(availableCharsets) . Returns the most preferred charset from a list of available charsets. . charsets() . Returns an array of preferred charsets ordered by the client preference. . charsets(availableCharsets) . Returns an array of preferred charsets ordered by priority from a list of available charsets. . Accept-Encoding Negotiation . availableEncodings = [&#39;identity&#39;, &#39;gzip&#39;] negotiator = new Negotiator(request) // Let&#39;s say Accept-Encoding header is &#39;gzip, compress;q=0.2, identity;q=0.5&#39; negotiator.encodings() // -&gt; [&#39;gzip&#39;, &#39;identity&#39;, &#39;compress&#39;] negotiator.encodings(availableEncodings) // -&gt; [&#39;gzip&#39;, &#39;identity&#39;] negotiator.encoding(availableEncodings) // -&gt; &#39;gzip&#39; . You can check a working example at examples/encoding.js. . Methods . encoding() . Returns the most preferred encoding from the client. . encoding(availableEncodings) . Returns the most preferred encoding from a list of available encodings. . encodings() . Returns an array of preferred encodings ordered by the client preference. . encodings(availableEncodings) . Returns an array of preferred encodings ordered by priority from a list of available encodings. . See Also . The accepts module builds on this module and provides an alternative interface, mime type validation, and more. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/negotiator/",
          "relUrl": "/node_backend/node_modules/negotiator/",
          "date": ""
      }
      
  

  
      ,"page37": {
          "title": "object-assign",
          "content": "object-assign . ES2015 Object.assign() ponyfill . Use the built-in . Node.js 4 and up, as well as every evergreen browser (Chrome, Edge, Firefox, Opera, Safari), support Object.assign() :tada:. If you target only those environments, then by all means, use Object.assign() instead of this package. . Install . $ npm install --save object-assign . Usage . const objectAssign = require(&#39;object-assign&#39;); objectAssign({foo: 0}, {bar: 1}); //=&gt; {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=&gt; {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=&gt; {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=&gt; {foo: 0, bar: 1} . API . objectAssign(target, [source, …]) . Assigns enumerable own properties of source objects to the target object and returns the target object. Additional source objects will overwrite previous ones. . Resources . ES2015 spec - Object.assign | . Related . deep-assign - Recursive Object.assign() | . License . MIT © Sindre Sorhus .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/object-assign/",
          "relUrl": "/node_backend/node_modules/object-assign/",
          "date": ""
      }
      
  

  
      ,"page38": {
          "title": "socket.io-adapter",
          "content": "socket.io-adapter . Default socket.io in-memory adapter class. . Compatibility table: . Adapter version Socket.IO server version . 1.x.x | 1.x.x / 2.x.x | . 2.x.x | 3.x.x | . How to use . This module is not intended for end-user usage, but can be used as an interface to inherit from other adapters you might want to build. . As an example of an adapter that builds on top of this, please take a look at socket.io-redis. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/socket.io-adapter/",
          "relUrl": "/node_backend/node_modules/socket.io-adapter/",
          "date": ""
      }
      
  

  
      ,"page39": {
          "title": "socket.io-parser",
          "content": "socket.io-parser . . A socket.io encoder and decoder written in JavaScript complying with version 5 of socket.io-protocol. Used by socket.io and socket.io-client. . Compatibility table: . Parser version Socket.IO server version Protocol revision . 3.x | 1.x / 2.x | 4 | . 4.x | 3.x | 5 | . Parser API . socket.io-parser is the reference implementation of socket.io-protocol. Read the full API here: socket.io-protocol. . Example Usage . Encoding and decoding a packet . var parser = require(&#39;socket.io-parser&#39;); var encoder = new parser.Encoder(); var packet = { type: parser.EVENT, data: &#39;test-packet&#39;, id: 13 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on(&#39;decoded&#39;, function(decodedPacket) { // decodedPacket.type == parser.EVENT // decodedPacket.data == &#39;test-packet&#39; // decodedPacket.id == 13 }); for (var i = 0; i &lt; encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); . Encoding and decoding a packet with binary data . var parser = require(&#39;socket.io-parser&#39;); var encoder = new parser.Encoder(); var packet = { type: parser.BINARY_EVENT, data: {i: new Buffer(1234), j: new Blob([new ArrayBuffer(2)])}, id: 15 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on(&#39;decoded&#39;, function(decodedPacket) { // decodedPacket.type == parser.BINARY_EVENT // Buffer.isBuffer(decodedPacket.data.i) == true // Buffer.isBuffer(decodedPacket.data.j) == true // decodedPacket.id == 15 }); for (var i = 0; i &lt; encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); . See the test suite for more examples of how socket.io-parser is used. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/socket.io-parser/",
          "relUrl": "/node_backend/node_modules/socket.io-parser/",
          "date": ""
      }
      
  

  
      ,"page40": {
          "title": "socket.io",
          "content": "socket.io . . Features . Socket.IO enables real-time bidirectional event-based communication. It consists of: . a Node.js server (this repository) | a Javascript client library for the browser (or a Node.js client) | . Some implementations in other languages are also available: . Java | C++ | Swift | Dart | Python | .NET | Rust | PHP | . Its main features are: . Reliability . Connections are established even in the presence of: . proxies and load balancers. | personal firewall and antivirus software. | . For this purpose, it relies on Engine.IO, which first establishes a long-polling connection, then tries to upgrade to better transports that are “tested” on the side, like WebSocket. Please see the Goals section for more information. . Auto-reconnection support . Unless instructed otherwise a disconnected client will try to reconnect forever, until the server is available again. Please see the available reconnection options here. . Disconnection detection . A heartbeat mechanism is implemented at the Engine.IO level, allowing both the server and the client to know when the other one is not responding anymore. . That functionality is achieved with timers set on both the server and the client, with timeout values (the pingInterval and pingTimeout parameters) shared during the connection handshake. Those timers require any subsequent client calls to be directed to the same server, hence the sticky-session requirement when using multiples nodes. . Binary support . Any serializable data structures can be emitted, including: . ArrayBuffer and Blob in the browser | ArrayBuffer and Buffer in Node.js | . Simple and convenient API . Sample code: . io.on(&#39;connection&#39;, socket =&gt; { socket.emit(&#39;request&#39;, /* … */); // emit an event to the socket io.emit(&#39;broadcast&#39;, /* … */); // emit an event to all connected sockets socket.on(&#39;reply&#39;, () =&gt; { /* … */ }); // listen to the event }); . Cross-browser . Browser support is tested in Sauce Labs: . . Multiplexing support . In order to create separation of concerns within your application (for example per module, or based on permissions), Socket.IO allows you to create several Namespaces, which will act as separate communication channels but will share the same underlying connection. . Room support . Within each Namespace, you can define arbitrary channels, called Rooms, that sockets can join and leave. You can then broadcast to any given room, reaching every socket that has joined it. . This is a useful feature to send notifications to a group of users, or to a given user connected on several devices for example. . Note: Socket.IO is not a WebSocket implementation. Although Socket.IO indeed uses WebSocket as a transport when possible, it adds some metadata to each packet: the packet type, the namespace and the ack id when a message acknowledgement is needed. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a WebSocket server (like ws://echo.websocket.org) either. Please see the protocol specification here. . Installation . // with npm npm install socket.io // with yarn yarn add socket.io . How to use . The following example attaches socket.io to a plain Node.JS HTTP server listening on port 3000. . const server = require(&#39;http&#39;).createServer(); const io = require(&#39;socket.io&#39;)(server); io.on(&#39;connection&#39;, client =&gt; { client.on(&#39;event&#39;, data =&gt; { /* … */ }); client.on(&#39;disconnect&#39;, () =&gt; { /* … */ }); }); server.listen(3000); . Standalone . const io = require(&#39;socket.io&#39;)(); io.on(&#39;connection&#39;, client =&gt; { ... }); io.listen(3000); . Module syntax . import { Server } from &quot;socket.io&quot;; const io = new Server(server); io.listen(3000); . In conjunction with Express . Starting with 3.0, express applications have become request handler functions that you pass to http or http Server instances. You need to pass the Server to socket.io, not the express application function. Also make sure to call .listen on the server, not the app. . const app = require(&#39;express&#39;)(); const server = require(&#39;http&#39;).createServer(app); const io = require(&#39;socket.io&#39;)(server); io.on(&#39;connection&#39;, () =&gt; { /* … */ }); server.listen(3000); . In conjunction with Koa . Like Express.JS, Koa works by exposing an application as a request handler function, but only by calling the callback method. . const app = require(&#39;koa&#39;)(); const server = require(&#39;http&#39;).createServer(app.callback()); const io = require(&#39;socket.io&#39;)(server); io.on(&#39;connection&#39;, () =&gt; { /* … */ }); server.listen(3000); . In conjunction with Fastify . To integrate Socket.io in your Fastify application you just need to register fastify-socket.io plugin. It will create a decorator called io. . const app = require(&#39;fastify&#39;)(); app.register(require(&#39;fastify-socket.io&#39;)); app.io.on(&#39;connection&#39;, () =&gt; { /* … */ }); app.listen(3000); . Documentation . Please see the documentation here. . The source code of the website can be found here. Contributions are welcome! . Debug / logging . Socket.IO is powered by debug. In order to see all the debug output, run your app with the environment variable DEBUG including the desired scope. . To see the output from all of Socket.IO’s debugging scopes you can use: . DEBUG=socket.io* node myapp . Testing . npm test . This runs the gulp task test. By default the test will be run with the source code in lib directory. . Set the environmental variable TEST_VERSION to compat to test the transpiled es5-compat version of the code. . The gulp task test will always transpile the source code into es5 and export to dist first before running the test. . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/socket.io/",
          "relUrl": "/node_backend/node_modules/socket.io/",
          "date": ""
      }
      
  

  
      ,"page41": {
          "title": "undici-types",
          "content": "undici-types . This package is a dual-publish of the undici library types. The undici package still contains types. This package is for users who only need undici types (such as for @types/node). It is published alongside every release of undici, so you can always use the same version. . GitHub nodejs/undici | Undici Documentation | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/undici-types/",
          "relUrl": "/node_backend/node_modules/undici-types/",
          "date": ""
      }
      
  

  
      ,"page42": {
          "title": "",
          "content": "uuid . For the creation of RFC4122 UUIDs . Complete - Support for RFC4122 version 1, 3, 4, and 5 UUIDs | Cross-platform - Support for … CommonJS, ECMAScript Modules and CDN builds | NodeJS 12+ (LTS releases) | Chrome, Safari, Firefox, Edge browsers | Webpack and rollup.js module bundlers | React Native / Expo | . | Secure - Cryptographically-strong random values | Small - Zero-dependency, small footprint, plays nice with “tree shaking” packagers | CLI - Includes the uuid command line utility | . Note Upgrading from uuid@3? Your code is probably okay, but check out Upgrading From uuid@3 for details. . Note Only interested in creating a version 4 UUID? You might be able to use crypto.randomUUID(), eliminating the need to install this library. . Quickstart . To create a random UUID… . 1. Install . npm install uuid . 2. Create a UUID (ES6 module syntax) . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); // ⇨ &#39;9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d&#39; . … or using CommonJS syntax: . const { v4: uuidv4 } = require(&#39;uuid&#39;); uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; . For timestamp UUIDs, namespace UUIDs, and other options read on … . API Summary .       . uuid.NIL | The nil UUID string (all zeros) | New in uuid@8.3 | . uuid.parse() | Convert UUID string to array of bytes | New in uuid@8.3 | . uuid.stringify() | Convert array of bytes to UUID string | New in uuid@8.3 | . uuid.v1() | Create a version 1 (timestamp) UUID |   | . uuid.v3() | Create a version 3 (namespace w/ MD5) UUID |   | . uuid.v4() | Create a version 4 (random) UUID |   | . uuid.v5() | Create a version 5 (namespace w/ SHA-1) UUID |   | . uuid.validate() | Test a string to see if it is a valid UUID | New in uuid@8.3 | . uuid.version() | Detect RFC version of a UUID | New in uuid@8.3 | . API . uuid.NIL . The nil UUID string (all zeros). . Example: . import { NIL as NIL_UUID } from &#39;uuid&#39;; NIL_UUID; // ⇨ &#39;00000000-0000-0000-0000-000000000000&#39; . uuid.parse(str) . Convert UUID string to array of bytes .     . str | A valid UUID String | . returns | Uint8Array[16] | . throws | TypeError if str is not a valid UUID | . Note: Ordering of values in the byte arrays used by parse() and stringify() follows the left &amp;Rarr; right order of hex-pairs in UUID strings. As shown in the example below. . Example: . import { parse as uuidParse } from &#39;uuid&#39;; // Parse a UUID const bytes = uuidParse(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // Convert to hex strings to show byte order (for documentation purposes) [...bytes].map((v) =&gt; v.toString(16).padStart(2, &#39;0&#39;)); // ⇨ // [ // &#39;6e&#39;, &#39;c0&#39;, &#39;bd&#39;, &#39;7f&#39;, // &#39;11&#39;, &#39;c0&#39;, &#39;43&#39;, &#39;da&#39;, // &#39;97&#39;, &#39;5e&#39;, &#39;2a&#39;, &#39;8a&#39;, // &#39;d9&#39;, &#39;eb&#39;, &#39;ae&#39;, &#39;0b&#39; // ] . uuid.stringify(arr[, offset]) . Convert array of bytes to UUID string .     . arr | Array-like collection of 16 values (starting from offset) between 0-255. | . [offset = 0] | Number Starting index in the Array | . returns | String | . throws | TypeError if a valid UUID string cannot be generated | . Note: Ordering of values in the byte arrays used by parse() and stringify() follows the left &amp;Rarr; right order of hex-pairs in UUID strings. As shown in the example below. . Example: . import { stringify as uuidStringify } from &#39;uuid&#39;; const uuidBytes = [ 0x6e, 0xc0, 0xbd, 0x7f, 0x11, 0xc0, 0x43, 0xda, 0x97, 0x5e, 0x2a, 0x8a, 0xd9, 0xeb, 0xae, 0x0b, ]; uuidStringify(uuidBytes); // ⇨ &#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39; . uuid.v1([options[, buffer[, offset]]]) . Create an RFC version 1 (timestamp) UUID .     . [options] | Object with one or more of the following properties: | . [options.node ] | RFC “node” field as an Array[6] of byte values (per 4.1.6) | . [options.clockseq] | RFC “clock sequence” as a Number between 0 - 0x3fff | . [options.msecs] | RFC “timestamp” field (Number of milliseconds, unix epoch) | . [options.nsecs] | RFC “timestamp” field (Number of nanoseconds to add to msecs, should be 0-10,000) | . [options.random] | Array of 16 random bytes (0-255) | . [options.rng] | Alternative to options.random, a Function that returns an Array of 16 random bytes (0-255) | . [buffer] | Array | Buffer If specified, uuid will be written here in byte-form, starting at offset | . [offset = 0] | Number Index to start writing UUID bytes in buffer | . returns | UUID String if no buffer is specified, otherwise returns buffer | . throws | Error if more than 10M UUIDs/sec are requested | . Note: The default node id (the last 12 digits in the UUID) is generated once, randomly, on process startup, and then remains unchanged for the duration of the process. . Note: options.random and options.rng are only meaningful on the very first call to v1(), where they may be passed to initialize the internal node and clockseq fields. . Example: . import { v1 as uuidv1 } from &#39;uuid&#39;; uuidv1(); // ⇨ &#39;2c5ea4c0-4067-11e9-8bad-9b1deb4d3b7d&#39; . Example using options: . import { v1 as uuidv1 } from &#39;uuid&#39;; const v1options = { node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab], clockseq: 0x1234, msecs: new Date(&#39;2011-11-01&#39;).getTime(), nsecs: 5678, }; uuidv1(v1options); // ⇨ &#39;710b962e-041c-11e1-9234-0123456789ab&#39; . uuid.v3(name, namespace[, buffer[, offset]]) . Create an RFC version 3 (namespace w/ MD5) UUID . API is identical to v5(), but uses “v3” instead. . ⚠️ Note: Per the RFC, “If backward compatibility is not an issue, SHA-1 [Version 5] is preferred.” . uuid.v4([options[, buffer[, offset]]]) . Create an RFC version 4 (random) UUID .     . [options] | Object with one or more of the following properties: | . [options.random] | Array of 16 random bytes (0-255) | . [options.rng] | Alternative to options.random, a Function that returns an Array of 16 random bytes (0-255) | . [buffer] | Array | Buffer If specified, uuid will be written here in byte-form, starting at offset | . [offset = 0] | Number Index to start writing UUID bytes in buffer | . returns | UUID String if no buffer is specified, otherwise returns buffer | . Example: . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; . Example using predefined random values: . import { v4 as uuidv4 } from &#39;uuid&#39;; const v4options = { random: [ 0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea, 0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36, ], }; uuidv4(v4options); // ⇨ &#39;109156be-c4fb-41ea-b1b4-efe1671c5836&#39; . uuid.v5(name, namespace[, buffer[, offset]]) . Create an RFC version 5 (namespace w/ SHA-1) UUID .     . name | String | Array | . namespace | String | Array[16] Namespace UUID | . [buffer] | Array | Buffer If specified, uuid will be written here in byte-form, starting at offset | . [offset = 0] | Number Index to start writing UUID bytes in buffer | . returns | UUID String if no buffer is specified, otherwise returns buffer | . Note: The RFC DNS and URL namespaces are available as v5.DNS and v5.URL. . Example with custom namespace: . import { v5 as uuidv5 } from &#39;uuid&#39;; // Define a custom namespace. Readers, create your own using something like // https://www.uuidgenerator.net/ const MY_NAMESPACE = &#39;1b671a64-40d5-491e-99b0-da01ff1f3341&#39;; uuidv5(&#39;Hello, World!&#39;, MY_NAMESPACE); // ⇨ &#39;630eb68f-e0fa-5ecc-887a-7c7a62614681&#39; . Example with RFC URL namespace: . import { v5 as uuidv5 } from &#39;uuid&#39;; uuidv5(&#39;https://www.w3.org/&#39;, uuidv5.URL); // ⇨ &#39;c106a26a-21bb-5538-8bf2-57095d1976c1&#39; . uuid.validate(str) . Test a string to see if it is a valid UUID .     . str | String to validate | . returns | true if string is a valid UUID, false otherwise | . Example: . import { validate as uuidValidate } from &#39;uuid&#39;; uuidValidate(&#39;not a UUID&#39;); // ⇨ false uuidValidate(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // ⇨ true . Using validate and version together it is possible to do per-version validation, e.g. validate for only v4 UUIds. . import { version as uuidVersion } from &#39;uuid&#39;; import { validate as uuidValidate } from &#39;uuid&#39;; function uuidValidateV4(uuid) { return uuidValidate(uuid) &amp;&amp; uuidVersion(uuid) === 4; } const v1Uuid = &#39;d9428888-122b-11e1-b85c-61cd3cbb3210&#39;; const v4Uuid = &#39;109156be-c4fb-41ea-b1b4-efe1671c5836&#39;; uuidValidateV4(v4Uuid); // ⇨ true uuidValidateV4(v1Uuid); // ⇨ false . uuid.version(str) . Detect RFC version of a UUID .     . str | A valid UUID String | . returns | Number The RFC version of the UUID | . throws | TypeError if str is not a valid UUID | . Example: . import { version as uuidVersion } from &#39;uuid&#39;; uuidVersion(&#39;45637ec4-c85f-11ea-87d0-0242ac130003&#39;); // ⇨ 1 uuidVersion(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // ⇨ 4 . Command Line . UUIDs can be generated from the command line using uuid. . $ npx uuid ddeb27fb-d9a0-4624-be4d-4615062daed4 . The default is to generate version 4 UUIDS, however the other versions are supported. Type uuid --help for details: . $ npx uuid --help Usage: uuid uuid v1 uuid v3 &lt;name&gt; &lt;namespace uuid&gt; uuid v4 uuid v5 &lt;name&gt; &lt;namespace uuid&gt; uuid --help Note: &lt;namespace uuid&gt; may be &quot;URL&quot; or &quot;DNS&quot; to use the corresponding UUIDs defined by RFC4122 . ECMAScript Modules . This library comes with ECMAScript Modules (ESM) support for Node.js versions that support it (example) as well as bundlers like rollup.js (example) and webpack (example) (targeting both, Node.js and browser environments). . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; . To run the examples you must first create a dist build of this library in the module root: . npm run build . CDN Builds . ECMAScript Modules . To load this module directly into modern browsers that support loading ECMAScript Modules you can make use of jspm: . &lt;script type=&quot;module&quot;&gt; import { v4 as uuidv4 } from &#39;https://jspm.dev/uuid&#39;; console.log(uuidv4()); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; &lt;/script&gt; . UMD . As of uuid@9 UMD (Universal Module Definition) builds are no longer shipped with this library. . If you need a UMD build of this library, use a bundler like Webpack or Rollup. Alternatively, refer to the documentation of uuid@8.3.2 which was the last version that shipped UMD builds. . Known issues . Duplicate UUIDs (Googlebot) . This module may generate duplicate UUIDs when run in clients with deterministic random number generators, such as Googlebot crawlers. This can cause problems for apps that expect client-generated UUIDs to always be unique. Developers should be prepared for this and have a strategy for dealing with possible collisions, such as: . Check for duplicate UUIDs, fail gracefully | Disable write operations for Googlebot clients | . “getRandomValues() not supported” . This error occurs in environments where the standard crypto.getRandomValues() API is not supported. This issue can be resolved by adding an appropriate polyfill: . React Native / Expo . Install react-native-get-random-values | Import it before uuid. Since uuid might also appear as a transitive dependency of some other imports it’s safest to just import react-native-get-random-values as the very first thing in your entry point: | import &#39;react-native-get-random-values&#39;; import { v4 as uuidv4 } from &#39;uuid&#39;; . Note: If you are using Expo, you must be using at least react-native-get-random-values@1.5.0 and expo@39.0.0. . Web Workers / Service Workers (Edge &lt;= 18) . In Edge &lt;= 18, Web Crypto is not supported in Web Workers or Service Workers and we are not aware of a polyfill (let us know if you find one, please). . IE 11 (Internet Explorer) . Support for IE11 and other legacy browsers has been dropped as of uuid@9. If you need to support legacy browsers, you can always transpile the uuid module source yourself (e.g. using Babel). . Upgrading From uuid@7 . Only Named Exports Supported When Using with Node.js ESM . uuid@7 did not come with native ECMAScript Module (ESM) support for Node.js. Importing it in Node.js ESM consequently imported the CommonJS source with a default export. This library now comes with true Node.js ESM support and only provides named exports. . Instead of doing: . import uuid from &#39;uuid&#39;; uuid.v4(); . you will now have to use the named exports: . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); . Deep Requires No Longer Supported . Deep requires like require(&#39;uuid/v4&#39;) which have been deprecated in uuid@7 are no longer supported. . Upgrading From uuid@3 . “Wait… what happened to uuid@4 thru uuid@6?!?” . In order to avoid confusion with RFC version 4 and version 5 UUIDs, and a possible version 6, releases 4 thru 6 of this module have been skipped. . Deep Requires Now Deprecated . uuid@3 encouraged the use of deep requires to minimize the bundle size of browser builds: . const uuidv4 = require(&#39;uuid/v4&#39;); // &lt;== NOW DEPRECATED! uuidv4(); . As of uuid@7 this library now provides ECMAScript modules builds, which allow packagers like Webpack and Rollup to do “tree-shaking” to remove dead code. Instead, use the import syntax: . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); . … or for CommonJS: . const { v4: uuidv4 } = require(&#39;uuid&#39;); uuidv4(); . Default Export Removed . uuid@3 was exporting the Version 4 UUID method as a default export: . const uuid = require(&#39;uuid&#39;); // &lt;== REMOVED! . This usage pattern was already discouraged in uuid@3 and has been removed in uuid@7. . . Markdown generated from README_js.md by .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/uuid/",
          "relUrl": "/node_backend/node_modules/uuid/",
          "date": ""
      }
      
  

  
      ,"page43": {
          "title": "vary",
          "content": "vary . . Manipulate the HTTP Vary header . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install vary . API . var vary = require(&#39;vary&#39;) . vary(res, field) . Adds the given header field to the Vary response header of res. This can be a string of a single field, a string of a valid Vary header, or an array of multiple fields. . This will append the header if not already listed, otherwise leaves it listed in the current location. . // Append &quot;Origin&quot; to the Vary header of the response vary(res, &#39;Origin&#39;) . vary.append(header, field) . Adds the given header field to the Vary response header string header. This can be a string of a single field, a string of a valid Vary header, or an array of multiple fields. . This will append the header if not already listed, otherwise leaves it listed in the current location. The new header string is returned. . // Get header string appending &quot;Origin&quot; to &quot;Accept, User-Agent&quot; vary.append(&#39;Accept, User-Agent&#39;, &#39;Origin&#39;) . Examples . Updating the Vary header when content is based on it . var http = require(&#39;http&#39;) var vary = require(&#39;vary&#39;) http.createServer(function onRequest (req, res) { // about to user-agent sniff vary(res, &#39;User-Agent&#39;) var ua = req.headers[&#39;user-agent&#39;] || &#39;&#39; var isMobile = /mobi|android|touch|mini/i.test(ua) // serve site, depending on isMobile res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;) res.end(&#39;You are (probably) &#39; + (isMobile ? &#39;&#39; : &#39;not &#39;) + &#39;a mobile user&#39;) }) . Testing . $ npm test . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/vary/",
          "relUrl": "/node_backend/node_modules/vary/",
          "date": ""
      }
      
  

  
      ,"page44": {
          "title": "ws: a Node.js WebSocket library",
          "content": "ws: a Node.js WebSocket library . . ws is a simple to use, blazing fast, and thoroughly tested WebSocket client and server implementation. . Passes the quite extensive Autobahn test suite: [server][server-report], client. . Note: This module does not work in the browser. The client in the docs is a reference to a back end with the role of a client in the WebSocket communication. Browser clients must use the native WebSocket object. To make the same code work seamlessly on Node.js and the browser, you can use one of the many wrappers available on npm, like isomorphic-ws. . Table of Contents . Protocol support | Installing Opt-in for performance | . | API docs | WebSocket compression | Usage examples Sending and receiving text data | Sending binary data | Simple server | External HTTP/S server | Multiple servers sharing a single HTTP/S server | Client authentication | Server broadcast | Round-trip time | Use the Node.js streams API | Other examples | . | FAQ How to get the IP address of the client? | How to detect and close broken connections? | How to connect via a proxy? | . | Changelog | License | . Protocol support . HyBi drafts 07-12 (Use the option protocolVersion: 8) | HyBi drafts 13-17 (Current default, alternatively option protocolVersion: 13) | . Installing . npm install ws . Opt-in for performance . There are 2 optional modules that can be installed along side with the ws module. These modules are binary addons which improve certain operations. Prebuilt binaries are available for the most popular platforms so you don’t necessarily need to have a C++ compiler installed on your machine. . npm install --save-optional bufferutil: Allows to efficiently perform operations such as masking and unmasking the data payload of the WebSocket frames. | npm install --save-optional utf-8-validate: Allows to efficiently check if a message contains valid UTF-8. | . To not even try to require and use these modules, use the WS_NO_BUFFER_UTIL and WS_NO_UTF_8_VALIDATE environment variables. These might be useful to enhance security in systems where a user can put a package in the package search path of an application of another user, due to how the Node.js resolver algorithm works. . API docs . See /doc/ws.md for Node.js-like documentation of ws classes and utility functions. . WebSocket compression . ws supports the [permessage-deflate extension][permessage-deflate] which enables the client and server to negotiate a compression algorithm and its parameters, and then selectively apply it to the data payloads of each WebSocket message. . The extension is disabled by default on the server and enabled by default on the client. It adds a significant overhead in terms of performance and memory consumption so we suggest to enable it only if it is really needed. . Note that Node.js has a variety of issues with high-performance compression, where increased concurrency, especially on Linux, can lead to catastrophic memory fragmentation and slow performance. If you intend to use permessage-deflate in production, it is worthwhile to set up a test representative of your workload and ensure Node.js/zlib will handle it with acceptable performance and memory usage. . Tuning of permessage-deflate can be done via the options defined below. You can also use zlibDeflateOptions and zlibInflateOptions, which is passed directly into the creation of [raw deflate/inflate streams][node-zlib-deflaterawdocs]. . See [the docs][ws-server-options] for more options. . import WebSocket, { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080, perMessageDeflate: { zlibDeflateOptions: { // See zlib defaults. chunkSize: 1024, memLevel: 7, level: 3 }, zlibInflateOptions: { chunkSize: 10 * 1024 }, // Other options settable: clientNoContextTakeover: true, // Defaults to negotiated value. serverNoContextTakeover: true, // Defaults to negotiated value. serverMaxWindowBits: 10, // Defaults to negotiated value. // Below options specified as default values. concurrencyLimit: 10, // Limits zlib concurrency for perf. threshold: 1024 // Size (in bytes) below which messages // should not be compressed if context takeover is disabled. } }); . The client will only use the extension if it is supported and enabled on the server. To always disable the extension on the client set the perMessageDeflate option to false. . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;ws://www.host.com/path&#39;, { perMessageDeflate: false }); . Usage examples . Sending and receiving text data . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;ws://www.host.com/path&#39;); ws.on(&#39;open&#39;, function open() { ws.send(&#39;something&#39;); }); ws.on(&#39;message&#39;, function message(data) { console.log(&#39;received: %s&#39;, data); }); . Sending binary data . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;ws://www.host.com/path&#39;); ws.on(&#39;open&#39;, function open() { const array = new Float32Array(5); for (var i = 0; i &lt; array.length; ++i) { array[i] = i / 2; } ws.send(array); }); . Simple server . import { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data) { console.log(&#39;received: %s&#39;, data); }); ws.send(&#39;something&#39;); }); . External HTTP/S server . import { createServer } from &#39;https&#39;; import { readFileSync } from &#39;fs&#39;; import { WebSocketServer } from &#39;ws&#39;; const server = createServer({ cert: readFileSync(&#39;/path/to/cert.pem&#39;), key: readFileSync(&#39;/path/to/key.pem&#39;) }); const wss = new WebSocketServer({ server }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data) { console.log(&#39;received: %s&#39;, data); }); ws.send(&#39;something&#39;); }); server.listen(8080); . Multiple servers sharing a single HTTP/S server . import { createServer } from &#39;http&#39;; import { parse } from &#39;url&#39;; import { WebSocketServer } from &#39;ws&#39;; const server = createServer(); const wss1 = new WebSocketServer({ noServer: true }); const wss2 = new WebSocketServer({ noServer: true }); wss1.on(&#39;connection&#39;, function connection(ws) { // ... }); wss2.on(&#39;connection&#39;, function connection(ws) { // ... }); server.on(&#39;upgrade&#39;, function upgrade(request, socket, head) { const { pathname } = parse(request.url); if (pathname === &#39;/foo&#39;) { wss1.handleUpgrade(request, socket, head, function done(ws) { wss1.emit(&#39;connection&#39;, ws, request); }); } else if (pathname === &#39;/bar&#39;) { wss2.handleUpgrade(request, socket, head, function done(ws) { wss2.emit(&#39;connection&#39;, ws, request); }); } else { socket.destroy(); } }); server.listen(8080); . Client authentication . import { createServer } from &#39;http&#39;; import { WebSocketServer } from &#39;ws&#39;; const server = createServer(); const wss = new WebSocketServer({ noServer: true }); wss.on(&#39;connection&#39;, function connection(ws, request, client) { ws.on(&#39;message&#39;, function message(data) { console.log(`Received message ${data} from user ${client}`); }); }); server.on(&#39;upgrade&#39;, function upgrade(request, socket, head) { // This function is not defined on purpose. Implement it with your own logic. authenticate(request, function next(err, client) { if (err || !client) { socket.write(&#39;HTTP/1.1 401 Unauthorized r n r n&#39;); socket.destroy(); return; } wss.handleUpgrade(request, socket, head, function done(ws) { wss.emit(&#39;connection&#39;, ws, request, client); }); }); }); server.listen(8080); . Also see the provided [example][session-parse-example] using express-session. . Server broadcast . A client WebSocket broadcasting to all connected WebSocket clients, including itself. . import WebSocket, { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data, isBinary) { wss.clients.forEach(function each(client) { if (client.readyState === WebSocket.OPEN) { client.send(data, { binary: isBinary }); } }); }); }); . A client WebSocket broadcasting to every other connected WebSocket clients, excluding itself. . import WebSocket, { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data, isBinary) { wss.clients.forEach(function each(client) { if (client !== ws &amp;&amp; client.readyState === WebSocket.OPEN) { client.send(data, { binary: isBinary }); } }); }); }); . Round-trip time . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;wss://websocket-echo.com/&#39;); ws.on(&#39;open&#39;, function open() { console.log(&#39;connected&#39;); ws.send(Date.now()); }); ws.on(&#39;close&#39;, function close() { console.log(&#39;disconnected&#39;); }); ws.on(&#39;message&#39;, function message(data) { console.log(`Round-trip time: ${Date.now() - data} ms`); setTimeout(function timeout() { ws.send(Date.now()); }, 500); }); . Use the Node.js streams API . import WebSocket, { createWebSocketStream } from &#39;ws&#39;; const ws = new WebSocket(&#39;wss://websocket-echo.com/&#39;); const duplex = createWebSocketStream(ws, { encoding: &#39;utf8&#39; }); duplex.pipe(process.stdout); process.stdin.pipe(duplex); . Other examples . For a full example with a browser client communicating with a ws server, see the examples folder. . Otherwise, see the test cases. . FAQ . How to get the IP address of the client? . The remote IP address can be obtained from the raw socket. . import { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws, req) { const ip = req.socket.remoteAddress; }); . When the server runs behind a proxy like NGINX, the de-facto standard is to use the X-Forwarded-For header. . wss.on(&#39;connection&#39;, function connection(ws, req) { const ip = req.headers[&#39;x-forwarded-for&#39;].split(&#39;,&#39;)[0].trim(); }); . How to detect and close broken connections? . Sometimes the link between the server and the client can be interrupted in a way that keeps both the server and the client unaware of the broken state of the connection (e.g. when pulling the cord). . In these cases ping messages can be used as a means to verify that the remote endpoint is still responsive. . import { WebSocketServer } from &#39;ws&#39;; function heartbeat() { this.isAlive = true; } const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.isAlive = true; ws.on(&#39;pong&#39;, heartbeat); }); const interval = setInterval(function ping() { wss.clients.forEach(function each(ws) { if (ws.isAlive === false) return ws.terminate(); ws.isAlive = false; ws.ping(); }); }, 30000); wss.on(&#39;close&#39;, function close() { clearInterval(interval); }); . Pong messages are automatically sent in response to ping messages as required by the spec. . Just like the server example above your clients might as well lose connection without knowing it. You might want to add a ping listener on your clients to prevent that. A simple implementation would be: . import WebSocket from &#39;ws&#39;; function heartbeat() { clearTimeout(this.pingTimeout); // Use `WebSocket#terminate()`, which immediately destroys the connection, // instead of `WebSocket#close()`, which waits for the close timer. // Delay should be equal to the interval at which your server // sends out pings plus a conservative assumption of the latency. this.pingTimeout = setTimeout(() =&gt; { this.terminate(); }, 30000 + 1000); } const client = new WebSocket(&#39;wss://websocket-echo.com/&#39;); client.on(&#39;open&#39;, heartbeat); client.on(&#39;ping&#39;, heartbeat); client.on(&#39;close&#39;, function clear() { clearTimeout(this.pingTimeout); }); . How to connect via a proxy? . Use a custom http.Agent implementation like https-proxy-agent or [socks-proxy-agent][]. . Changelog . We’re using the GitHub releases for changelog entries. . License . MIT . [node-zlib-deflaterawdocs]: https://nodejs.org/api/zlib.html#zlib_zlib_createdeflateraw_options [permessage-deflate]: https://tools.ietf.org/html/rfc7692 [server-report]: http://websockets.github.io/ws/autobahn/servers/ [session-parse-example]: ./examples/express-session-parse [socks-proxy-agent]: https://github.com/TooTallNate/node-socks-proxy-agent [ws-server-options]: ./doc/ws.md#new-websocketserveroptions-callback .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/ws/",
          "relUrl": "/node_backend/node_modules/ws/",
          "date": ""
      }
      
  

}